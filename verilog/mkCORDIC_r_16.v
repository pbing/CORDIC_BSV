//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd50140)
//
// On Sat Jan  8 15:28:43 CET 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    50
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    48
// EN_request_put                 I     1
// EN_response_get                I     1
//
// Combinational paths from inputs to outputs:
//   EN_response_get -> RDY_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCORDIC_r_16(CLK,
		     RST_N,

		     request_put,
		     EN_request_put,
		     RDY_request_put,

		     EN_response_get,
		     response_get,
		     RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [47 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [49 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [49 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule m_stg_0
  wire [65 : 0] m_stg_0$D_IN, m_stg_0$D_OUT;
  wire m_stg_0$CLR, m_stg_0$DEQ, m_stg_0$EMPTY_N, m_stg_0$ENQ, m_stg_0$FULL_N;

  // ports of submodule m_stg_1
  wire [65 : 0] m_stg_1$D_IN, m_stg_1$D_OUT;
  wire m_stg_1$CLR, m_stg_1$DEQ, m_stg_1$EMPTY_N, m_stg_1$ENQ, m_stg_1$FULL_N;

  // ports of submodule m_stg_10
  wire [65 : 0] m_stg_10$D_IN, m_stg_10$D_OUT;
  wire m_stg_10$CLR,
       m_stg_10$DEQ,
       m_stg_10$EMPTY_N,
       m_stg_10$ENQ,
       m_stg_10$FULL_N;

  // ports of submodule m_stg_11
  wire [65 : 0] m_stg_11$D_IN, m_stg_11$D_OUT;
  wire m_stg_11$CLR,
       m_stg_11$DEQ,
       m_stg_11$EMPTY_N,
       m_stg_11$ENQ,
       m_stg_11$FULL_N;

  // ports of submodule m_stg_12
  wire [65 : 0] m_stg_12$D_IN, m_stg_12$D_OUT;
  wire m_stg_12$CLR,
       m_stg_12$DEQ,
       m_stg_12$EMPTY_N,
       m_stg_12$ENQ,
       m_stg_12$FULL_N;

  // ports of submodule m_stg_13
  wire [65 : 0] m_stg_13$D_IN, m_stg_13$D_OUT;
  wire m_stg_13$CLR,
       m_stg_13$DEQ,
       m_stg_13$EMPTY_N,
       m_stg_13$ENQ,
       m_stg_13$FULL_N;

  // ports of submodule m_stg_14
  wire [65 : 0] m_stg_14$D_IN, m_stg_14$D_OUT;
  wire m_stg_14$CLR,
       m_stg_14$DEQ,
       m_stg_14$EMPTY_N,
       m_stg_14$ENQ,
       m_stg_14$FULL_N;

  // ports of submodule m_stg_15
  wire [65 : 0] m_stg_15$D_IN, m_stg_15$D_OUT;
  wire m_stg_15$CLR,
       m_stg_15$DEQ,
       m_stg_15$EMPTY_N,
       m_stg_15$ENQ,
       m_stg_15$FULL_N;

  // ports of submodule m_stg_16
  wire [65 : 0] m_stg_16$D_IN, m_stg_16$D_OUT;
  wire m_stg_16$CLR,
       m_stg_16$DEQ,
       m_stg_16$EMPTY_N,
       m_stg_16$ENQ,
       m_stg_16$FULL_N;

  // ports of submodule m_stg_17
  wire [65 : 0] m_stg_17$D_IN, m_stg_17$D_OUT;
  wire m_stg_17$CLR,
       m_stg_17$DEQ,
       m_stg_17$EMPTY_N,
       m_stg_17$ENQ,
       m_stg_17$FULL_N;

  // ports of submodule m_stg_18
  wire [65 : 0] m_stg_18$D_IN, m_stg_18$D_OUT;
  wire m_stg_18$CLR,
       m_stg_18$DEQ,
       m_stg_18$EMPTY_N,
       m_stg_18$ENQ,
       m_stg_18$FULL_N;

  // ports of submodule m_stg_2
  wire [65 : 0] m_stg_2$D_IN, m_stg_2$D_OUT;
  wire m_stg_2$CLR, m_stg_2$DEQ, m_stg_2$EMPTY_N, m_stg_2$ENQ, m_stg_2$FULL_N;

  // ports of submodule m_stg_3
  wire [65 : 0] m_stg_3$D_IN, m_stg_3$D_OUT;
  wire m_stg_3$CLR, m_stg_3$DEQ, m_stg_3$EMPTY_N, m_stg_3$ENQ, m_stg_3$FULL_N;

  // ports of submodule m_stg_4
  wire [65 : 0] m_stg_4$D_IN, m_stg_4$D_OUT;
  wire m_stg_4$CLR, m_stg_4$DEQ, m_stg_4$EMPTY_N, m_stg_4$ENQ, m_stg_4$FULL_N;

  // ports of submodule m_stg_5
  wire [65 : 0] m_stg_5$D_IN, m_stg_5$D_OUT;
  wire m_stg_5$CLR, m_stg_5$DEQ, m_stg_5$EMPTY_N, m_stg_5$ENQ, m_stg_5$FULL_N;

  // ports of submodule m_stg_6
  wire [65 : 0] m_stg_6$D_IN, m_stg_6$D_OUT;
  wire m_stg_6$CLR, m_stg_6$DEQ, m_stg_6$EMPTY_N, m_stg_6$ENQ, m_stg_6$FULL_N;

  // ports of submodule m_stg_7
  wire [65 : 0] m_stg_7$D_IN, m_stg_7$D_OUT;
  wire m_stg_7$CLR, m_stg_7$DEQ, m_stg_7$EMPTY_N, m_stg_7$ENQ, m_stg_7$FULL_N;

  // ports of submodule m_stg_8
  wire [65 : 0] m_stg_8$D_IN, m_stg_8$D_OUT;
  wire m_stg_8$CLR, m_stg_8$DEQ, m_stg_8$EMPTY_N, m_stg_8$ENQ, m_stg_8$FULL_N;

  // ports of submodule m_stg_9
  wire [65 : 0] m_stg_9$D_IN, m_stg_9$D_OUT;
  wire m_stg_9$CLR, m_stg_9$DEQ, m_stg_9$EMPTY_N, m_stg_9$ENQ, m_stg_9$FULL_N;

  // remaining internal signals
  wire [65 : 0] IF_SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_ETC___d364;
  wire [22 : 0] SEXT_m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q6,
		SEXT_m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q3,
		SEXT_request_put_BITS_31_TO_160__q81,
		SEXT_request_put_BITS_47_TO_328__q79,
		m_stg_0D_OUT_BITS_42_TO_20__q10,
		m_stg_0D_OUT_BITS_65_TO_43__q45,
		m_stg_0_first_BITS_42_TO_20_SRA_0___d8,
		m_stg_0_first_BITS_65_TO_43_SRA_0___d10,
		m_stg_10D_OUT_BITS_42_TO_20__q31,
		m_stg_10D_OUT_BITS_65_TO_43__q64,
		m_stg_10_first__94_BITS_42_TO_20_97_SRA_10___d198,
		m_stg_10_first__94_BITS_65_TO_43_96_SRA_10___d200,
		m_stg_11D_OUT_BITS_42_TO_20__q29,
		m_stg_11D_OUT_BITS_65_TO_43__q66,
		m_stg_11_first__13_BITS_42_TO_20_16_SRA_11___d217,
		m_stg_11_first__13_BITS_65_TO_43_15_SRA_11___d219,
		m_stg_12D_OUT_BITS_42_TO_20__q33,
		m_stg_12D_OUT_BITS_65_TO_43__q68,
		m_stg_12_first__32_BITS_42_TO_20_35_SRA_12___d236,
		m_stg_12_first__32_BITS_65_TO_43_34_SRA_12___d238,
		m_stg_13D_OUT_BITS_42_TO_20__q35,
		m_stg_13D_OUT_BITS_65_TO_43__q70,
		m_stg_13_first__51_BITS_42_TO_20_54_SRA_13___d255,
		m_stg_13_first__51_BITS_65_TO_43_53_SRA_13___d257,
		m_stg_14D_OUT_BITS_42_TO_20__q37,
		m_stg_14D_OUT_BITS_65_TO_43__q72,
		m_stg_14_first__70_BITS_42_TO_20_73_SRA_14___d274,
		m_stg_14_first__70_BITS_65_TO_43_72_SRA_14___d276,
		m_stg_15D_OUT_BITS_42_TO_20__q39,
		m_stg_15D_OUT_BITS_65_TO_43__q74,
		m_stg_15_first__89_BITS_42_TO_20_92_SRA_15___d293,
		m_stg_15_first__89_BITS_65_TO_43_91_SRA_15___d295,
		m_stg_16D_OUT_BITS_42_TO_20__q41,
		m_stg_16D_OUT_BITS_65_TO_43__q76,
		m_stg_16_first__08_BITS_42_TO_20_11_SRA_16___d312,
		m_stg_16_first__08_BITS_65_TO_43_10_SRA_16___d314,
		m_stg_18D_OUT_BITS_42_TO_20__q4,
		m_stg_18D_OUT_BITS_65_TO_43__q1,
		m_stg_1D_OUT_BITS_42_TO_20__q11,
		m_stg_1D_OUT_BITS_65_TO_43__q46,
		m_stg_1_first__3_BITS_42_TO_20_6_SRA_1___d27,
		m_stg_1_first__3_BITS_65_TO_43_5_SRA_1___d29,
		m_stg_2D_OUT_BITS_42_TO_20__q13,
		m_stg_2D_OUT_BITS_65_TO_43__q48,
		m_stg_2_first__2_BITS_42_TO_20_5_SRA_2___d46,
		m_stg_2_first__2_BITS_65_TO_43_4_SRA_2___d48,
		m_stg_3D_OUT_BITS_42_TO_20__q15,
		m_stg_3D_OUT_BITS_65_TO_43__q50,
		m_stg_3_first__1_BITS_42_TO_20_4_SRA_3___d65,
		m_stg_3_first__1_BITS_65_TO_43_3_SRA_3___d67,
		m_stg_4D_OUT_BITS_42_TO_20__q17,
		m_stg_4D_OUT_BITS_65_TO_43__q52,
		m_stg_4_first__0_BITS_42_TO_20_3_SRA_4___d84,
		m_stg_4_first__0_BITS_65_TO_43_2_SRA_4___d86,
		m_stg_5D_OUT_BITS_42_TO_20__q19,
		m_stg_5D_OUT_BITS_65_TO_43__q56,
		m_stg_5_first__9_BITS_42_TO_20_02_SRA_5___d103,
		m_stg_5_first__9_BITS_65_TO_43_01_SRA_5___d105,
		m_stg_6D_OUT_BITS_42_TO_20__q21,
		m_stg_6D_OUT_BITS_65_TO_43__q54,
		m_stg_6_first__18_BITS_42_TO_20_21_SRA_6___d122,
		m_stg_6_first__18_BITS_65_TO_43_20_SRA_6___d124,
		m_stg_7D_OUT_BITS_42_TO_20__q23,
		m_stg_7D_OUT_BITS_65_TO_43__q58,
		m_stg_7_first__37_BITS_42_TO_20_40_SRA_7___d141,
		m_stg_7_first__37_BITS_65_TO_43_39_SRA_7___d143,
		m_stg_8D_OUT_BITS_42_TO_20__q25,
		m_stg_8D_OUT_BITS_65_TO_43__q60,
		m_stg_8_first__56_BITS_42_TO_20_59_SRA_8___d160,
		m_stg_8_first__56_BITS_65_TO_43_58_SRA_8___d162,
		m_stg_9D_OUT_BITS_42_TO_20__q27,
		m_stg_9D_OUT_BITS_65_TO_43__q62,
		m_stg_9_first__75_BITS_42_TO_20_78_SRA_9___d179,
		m_stg_9_first__75_BITS_65_TO_43_77_SRA_9___d181;
  wire [21 : 0] m_stg_1D_OUT_BITS_42_TO_201_BITS_22_TO_1__q12,
		m_stg_1D_OUT_BITS_65_TO_436_BITS_22_TO_1__q47;
  wire [20 : 0] m_stg_2D_OUT_BITS_42_TO_203_BITS_22_TO_2__q14,
		m_stg_2D_OUT_BITS_65_TO_438_BITS_22_TO_2__q49;
  wire [19 : 0] SEXT_m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q9,
		SEXT_request_put_BITS_15_TO_03__q44,
		SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344,
		m_stg_18D_OUT_BITS_19_TO_0__q7,
		m_stg_3D_OUT_BITS_42_TO_205_BITS_22_TO_3__q16,
		m_stg_3D_OUT_BITS_65_TO_430_BITS_22_TO_3__q51;
  wire [18 : 0] m_stg_4D_OUT_BITS_42_TO_207_BITS_22_TO_4__q18,
		m_stg_4D_OUT_BITS_65_TO_432_BITS_22_TO_4__q53;
  wire [17 : 0] m_stg_5D_OUT_BITS_42_TO_209_BITS_22_TO_5__q20,
		m_stg_5D_OUT_BITS_65_TO_436_BITS_22_TO_5__q57;
  wire [16 : 0] m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q5,
		m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q2,
		m_stg_6D_OUT_BITS_42_TO_201_BITS_22_TO_6__q22,
		m_stg_6D_OUT_BITS_65_TO_434_BITS_22_TO_6__q55;
  wire [15 : 0] m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q8,
		m_stg_7D_OUT_BITS_42_TO_203_BITS_22_TO_7__q24,
		m_stg_7D_OUT_BITS_65_TO_438_BITS_22_TO_7__q59,
		request_put_BITS_15_TO_0__q43,
		request_put_BITS_31_TO_16__q80,
		request_put_BITS_47_TO_32__q78;
  wire [14 : 0] m_stg_8D_OUT_BITS_42_TO_205_BITS_22_TO_8__q26,
		m_stg_8D_OUT_BITS_65_TO_430_BITS_22_TO_8__q61;
  wire [13 : 0] m_stg_9D_OUT_BITS_42_TO_207_BITS_22_TO_9__q28,
		m_stg_9D_OUT_BITS_65_TO_432_BITS_22_TO_9__q63;
  wire [12 : 0] m_stg_10D_OUT_BITS_42_TO_201_BITS_22_TO_10__q32,
		m_stg_10D_OUT_BITS_65_TO_434_BITS_22_TO_10__q65;
  wire [11 : 0] m_stg_11D_OUT_BITS_42_TO_209_BITS_22_TO_11__q30,
		m_stg_11D_OUT_BITS_65_TO_436_BITS_22_TO_11__q67;
  wire [10 : 0] m_stg_12D_OUT_BITS_42_TO_203_BITS_22_TO_12__q34,
		m_stg_12D_OUT_BITS_65_TO_438_BITS_22_TO_12__q69;
  wire [9 : 0] m_stg_13D_OUT_BITS_42_TO_205_BITS_22_TO_13__q36,
	       m_stg_13D_OUT_BITS_65_TO_430_BITS_22_TO_13__q71;
  wire [8 : 0] m_stg_14D_OUT_BITS_42_TO_207_BITS_22_TO_14__q38,
	       m_stg_14D_OUT_BITS_65_TO_432_BITS_22_TO_14__q73;
  wire [7 : 0] m_stg_15D_OUT_BITS_42_TO_209_BITS_22_TO_15__q40,
	       m_stg_15D_OUT_BITS_65_TO_434_BITS_22_TO_15__q75;
  wire [6 : 0] m_stg_16D_OUT_BITS_42_TO_201_BITS_22_TO_16__q42,
	       m_stg_16D_OUT_BITS_65_TO_436_BITS_22_TO_16__q77;
  wire SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d357;

  // action method request_put
  assign RDY_request_put = m_stg_0$FULL_N ;

  // actionvalue method response_get
  assign response_get =
	     { SEXT_m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q3[16:0],
	       SEXT_m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q6[16:0],
	       SEXT_m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q9[15:0] } ;
  assign RDY_response_get = m_stg_18$EMPTY_N ;

  // submodule m_stg_0
  FIFOL1 #(.width(32'd66)) m_stg_0(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_0$D_IN),
				   .ENQ(m_stg_0$ENQ),
				   .DEQ(m_stg_0$DEQ),
				   .CLR(m_stg_0$CLR),
				   .D_OUT(m_stg_0$D_OUT),
				   .FULL_N(m_stg_0$FULL_N),
				   .EMPTY_N(m_stg_0$EMPTY_N));

  // submodule m_stg_1
  FIFOL1 #(.width(32'd66)) m_stg_1(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_1$D_IN),
				   .ENQ(m_stg_1$ENQ),
				   .DEQ(m_stg_1$DEQ),
				   .CLR(m_stg_1$CLR),
				   .D_OUT(m_stg_1$D_OUT),
				   .FULL_N(m_stg_1$FULL_N),
				   .EMPTY_N(m_stg_1$EMPTY_N));

  // submodule m_stg_10
  FIFOL1 #(.width(32'd66)) m_stg_10(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_10$D_IN),
				    .ENQ(m_stg_10$ENQ),
				    .DEQ(m_stg_10$DEQ),
				    .CLR(m_stg_10$CLR),
				    .D_OUT(m_stg_10$D_OUT),
				    .FULL_N(m_stg_10$FULL_N),
				    .EMPTY_N(m_stg_10$EMPTY_N));

  // submodule m_stg_11
  FIFOL1 #(.width(32'd66)) m_stg_11(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_11$D_IN),
				    .ENQ(m_stg_11$ENQ),
				    .DEQ(m_stg_11$DEQ),
				    .CLR(m_stg_11$CLR),
				    .D_OUT(m_stg_11$D_OUT),
				    .FULL_N(m_stg_11$FULL_N),
				    .EMPTY_N(m_stg_11$EMPTY_N));

  // submodule m_stg_12
  FIFOL1 #(.width(32'd66)) m_stg_12(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_12$D_IN),
				    .ENQ(m_stg_12$ENQ),
				    .DEQ(m_stg_12$DEQ),
				    .CLR(m_stg_12$CLR),
				    .D_OUT(m_stg_12$D_OUT),
				    .FULL_N(m_stg_12$FULL_N),
				    .EMPTY_N(m_stg_12$EMPTY_N));

  // submodule m_stg_13
  FIFOL1 #(.width(32'd66)) m_stg_13(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_13$D_IN),
				    .ENQ(m_stg_13$ENQ),
				    .DEQ(m_stg_13$DEQ),
				    .CLR(m_stg_13$CLR),
				    .D_OUT(m_stg_13$D_OUT),
				    .FULL_N(m_stg_13$FULL_N),
				    .EMPTY_N(m_stg_13$EMPTY_N));

  // submodule m_stg_14
  FIFOL1 #(.width(32'd66)) m_stg_14(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_14$D_IN),
				    .ENQ(m_stg_14$ENQ),
				    .DEQ(m_stg_14$DEQ),
				    .CLR(m_stg_14$CLR),
				    .D_OUT(m_stg_14$D_OUT),
				    .FULL_N(m_stg_14$FULL_N),
				    .EMPTY_N(m_stg_14$EMPTY_N));

  // submodule m_stg_15
  FIFOL1 #(.width(32'd66)) m_stg_15(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_15$D_IN),
				    .ENQ(m_stg_15$ENQ),
				    .DEQ(m_stg_15$DEQ),
				    .CLR(m_stg_15$CLR),
				    .D_OUT(m_stg_15$D_OUT),
				    .FULL_N(m_stg_15$FULL_N),
				    .EMPTY_N(m_stg_15$EMPTY_N));

  // submodule m_stg_16
  FIFOL1 #(.width(32'd66)) m_stg_16(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_16$D_IN),
				    .ENQ(m_stg_16$ENQ),
				    .DEQ(m_stg_16$DEQ),
				    .CLR(m_stg_16$CLR),
				    .D_OUT(m_stg_16$D_OUT),
				    .FULL_N(m_stg_16$FULL_N),
				    .EMPTY_N(m_stg_16$EMPTY_N));

  // submodule m_stg_17
  FIFOL1 #(.width(32'd66)) m_stg_17(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_17$D_IN),
				    .ENQ(m_stg_17$ENQ),
				    .DEQ(m_stg_17$DEQ),
				    .CLR(m_stg_17$CLR),
				    .D_OUT(m_stg_17$D_OUT),
				    .FULL_N(m_stg_17$FULL_N),
				    .EMPTY_N(m_stg_17$EMPTY_N));

  // submodule m_stg_18
  FIFOL1 #(.width(32'd66)) m_stg_18(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(m_stg_18$D_IN),
				    .ENQ(m_stg_18$ENQ),
				    .DEQ(m_stg_18$DEQ),
				    .CLR(m_stg_18$CLR),
				    .D_OUT(m_stg_18$D_OUT),
				    .FULL_N(m_stg_18$FULL_N),
				    .EMPTY_N(m_stg_18$EMPTY_N));

  // submodule m_stg_2
  FIFOL1 #(.width(32'd66)) m_stg_2(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_2$D_IN),
				   .ENQ(m_stg_2$ENQ),
				   .DEQ(m_stg_2$DEQ),
				   .CLR(m_stg_2$CLR),
				   .D_OUT(m_stg_2$D_OUT),
				   .FULL_N(m_stg_2$FULL_N),
				   .EMPTY_N(m_stg_2$EMPTY_N));

  // submodule m_stg_3
  FIFOL1 #(.width(32'd66)) m_stg_3(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_3$D_IN),
				   .ENQ(m_stg_3$ENQ),
				   .DEQ(m_stg_3$DEQ),
				   .CLR(m_stg_3$CLR),
				   .D_OUT(m_stg_3$D_OUT),
				   .FULL_N(m_stg_3$FULL_N),
				   .EMPTY_N(m_stg_3$EMPTY_N));

  // submodule m_stg_4
  FIFOL1 #(.width(32'd66)) m_stg_4(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_4$D_IN),
				   .ENQ(m_stg_4$ENQ),
				   .DEQ(m_stg_4$DEQ),
				   .CLR(m_stg_4$CLR),
				   .D_OUT(m_stg_4$D_OUT),
				   .FULL_N(m_stg_4$FULL_N),
				   .EMPTY_N(m_stg_4$EMPTY_N));

  // submodule m_stg_5
  FIFOL1 #(.width(32'd66)) m_stg_5(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_5$D_IN),
				   .ENQ(m_stg_5$ENQ),
				   .DEQ(m_stg_5$DEQ),
				   .CLR(m_stg_5$CLR),
				   .D_OUT(m_stg_5$D_OUT),
				   .FULL_N(m_stg_5$FULL_N),
				   .EMPTY_N(m_stg_5$EMPTY_N));

  // submodule m_stg_6
  FIFOL1 #(.width(32'd66)) m_stg_6(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_6$D_IN),
				   .ENQ(m_stg_6$ENQ),
				   .DEQ(m_stg_6$DEQ),
				   .CLR(m_stg_6$CLR),
				   .D_OUT(m_stg_6$D_OUT),
				   .FULL_N(m_stg_6$FULL_N),
				   .EMPTY_N(m_stg_6$EMPTY_N));

  // submodule m_stg_7
  FIFOL1 #(.width(32'd66)) m_stg_7(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_7$D_IN),
				   .ENQ(m_stg_7$ENQ),
				   .DEQ(m_stg_7$DEQ),
				   .CLR(m_stg_7$CLR),
				   .D_OUT(m_stg_7$D_OUT),
				   .FULL_N(m_stg_7$FULL_N),
				   .EMPTY_N(m_stg_7$EMPTY_N));

  // submodule m_stg_8
  FIFOL1 #(.width(32'd66)) m_stg_8(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_8$D_IN),
				   .ENQ(m_stg_8$ENQ),
				   .DEQ(m_stg_8$DEQ),
				   .CLR(m_stg_8$CLR),
				   .D_OUT(m_stg_8$D_OUT),
				   .FULL_N(m_stg_8$FULL_N),
				   .EMPTY_N(m_stg_8$EMPTY_N));

  // submodule m_stg_9
  FIFOL1 #(.width(32'd66)) m_stg_9(.RST(RST_N),
				   .CLK(CLK),
				   .D_IN(m_stg_9$D_IN),
				   .ENQ(m_stg_9$ENQ),
				   .DEQ(m_stg_9$DEQ),
				   .CLR(m_stg_9$CLR),
				   .D_OUT(m_stg_9$D_OUT),
				   .FULL_N(m_stg_9$FULL_N),
				   .EMPTY_N(m_stg_9$EMPTY_N));

  // submodule m_stg_0
  assign m_stg_0$D_IN =
	     ((SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 ^
	       20'h80000) <
	      20'd262144) ?
	       { SEXT_request_put_BITS_31_TO_160__q81[16:0],
		 6'd0,
		 -{ SEXT_request_put_BITS_47_TO_328__q79[16:0], 6'd0 },
		 SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 +
		 20'd262144 } :
	       IF_SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_ETC___d364 ;
  assign m_stg_0$ENQ = EN_request_put ;
  assign m_stg_0$DEQ = m_stg_0$EMPTY_N && m_stg_1$FULL_N ;
  assign m_stg_0$CLR = 1'b0 ;

  // submodule m_stg_1
  assign m_stg_1$D_IN =
	     m_stg_0$D_OUT[19] ?
	       { m_stg_0$D_OUT[65:43] +
		 m_stg_0_first_BITS_42_TO_20_SRA_0___d8,
		 m_stg_0$D_OUT[42:20] -
		 m_stg_0_first_BITS_65_TO_43_SRA_0___d10,
		 m_stg_0$D_OUT[19:0] + 20'd131072 } :
	       { m_stg_0$D_OUT[65:43] -
		 m_stg_0_first_BITS_42_TO_20_SRA_0___d8,
		 m_stg_0$D_OUT[42:20] +
		 m_stg_0_first_BITS_65_TO_43_SRA_0___d10,
		 m_stg_0$D_OUT[19:0] - 20'd131072 } ;
  assign m_stg_1$ENQ = m_stg_0$EMPTY_N && m_stg_1$FULL_N ;
  assign m_stg_1$DEQ = m_stg_1$EMPTY_N && m_stg_2$FULL_N ;
  assign m_stg_1$CLR = 1'b0 ;

  // submodule m_stg_10
  assign m_stg_10$D_IN =
	     m_stg_9$D_OUT[19] ?
	       { m_stg_9$D_OUT[65:43] +
		 m_stg_9_first__75_BITS_42_TO_20_78_SRA_9___d179,
		 m_stg_9$D_OUT[42:20] -
		 m_stg_9_first__75_BITS_65_TO_43_77_SRA_9___d181,
		 m_stg_9$D_OUT[19:0] + 20'd326 } :
	       { m_stg_9$D_OUT[65:43] -
		 m_stg_9_first__75_BITS_42_TO_20_78_SRA_9___d179,
		 m_stg_9$D_OUT[42:20] +
		 m_stg_9_first__75_BITS_65_TO_43_77_SRA_9___d181,
		 m_stg_9$D_OUT[19:0] - 20'd326 } ;
  assign m_stg_10$ENQ = m_stg_9$EMPTY_N && m_stg_10$FULL_N ;
  assign m_stg_10$DEQ = m_stg_10$EMPTY_N && m_stg_11$FULL_N ;
  assign m_stg_10$CLR = 1'b0 ;

  // submodule m_stg_11
  assign m_stg_11$D_IN =
	     m_stg_10$D_OUT[19] ?
	       { m_stg_10$D_OUT[65:43] +
		 m_stg_10_first__94_BITS_42_TO_20_97_SRA_10___d198,
		 m_stg_10$D_OUT[42:20] -
		 m_stg_10_first__94_BITS_65_TO_43_96_SRA_10___d200,
		 m_stg_10$D_OUT[19:0] + 20'd163 } :
	       { m_stg_10$D_OUT[65:43] -
		 m_stg_10_first__94_BITS_42_TO_20_97_SRA_10___d198,
		 m_stg_10$D_OUT[42:20] +
		 m_stg_10_first__94_BITS_65_TO_43_96_SRA_10___d200,
		 m_stg_10$D_OUT[19:0] - 20'd163 } ;
  assign m_stg_11$ENQ = m_stg_10$EMPTY_N && m_stg_11$FULL_N ;
  assign m_stg_11$DEQ = m_stg_11$EMPTY_N && m_stg_12$FULL_N ;
  assign m_stg_11$CLR = 1'b0 ;

  // submodule m_stg_12
  assign m_stg_12$D_IN =
	     m_stg_11$D_OUT[19] ?
	       { m_stg_11$D_OUT[65:43] +
		 m_stg_11_first__13_BITS_42_TO_20_16_SRA_11___d217,
		 m_stg_11$D_OUT[42:20] -
		 m_stg_11_first__13_BITS_65_TO_43_15_SRA_11___d219,
		 m_stg_11$D_OUT[19:0] + 20'd81 } :
	       { m_stg_11$D_OUT[65:43] -
		 m_stg_11_first__13_BITS_42_TO_20_16_SRA_11___d217,
		 m_stg_11$D_OUT[42:20] +
		 m_stg_11_first__13_BITS_65_TO_43_15_SRA_11___d219,
		 m_stg_11$D_OUT[19:0] - 20'd81 } ;
  assign m_stg_12$ENQ = m_stg_11$EMPTY_N && m_stg_12$FULL_N ;
  assign m_stg_12$DEQ = m_stg_12$EMPTY_N && m_stg_13$FULL_N ;
  assign m_stg_12$CLR = 1'b0 ;

  // submodule m_stg_13
  assign m_stg_13$D_IN =
	     m_stg_12$D_OUT[19] ?
	       { m_stg_12$D_OUT[65:43] +
		 m_stg_12_first__32_BITS_42_TO_20_35_SRA_12___d236,
		 m_stg_12$D_OUT[42:20] -
		 m_stg_12_first__32_BITS_65_TO_43_34_SRA_12___d238,
		 m_stg_12$D_OUT[19:0] + 20'd41 } :
	       { m_stg_12$D_OUT[65:43] -
		 m_stg_12_first__32_BITS_42_TO_20_35_SRA_12___d236,
		 m_stg_12$D_OUT[42:20] +
		 m_stg_12_first__32_BITS_65_TO_43_34_SRA_12___d238,
		 m_stg_12$D_OUT[19:0] - 20'd41 } ;
  assign m_stg_13$ENQ = m_stg_12$EMPTY_N && m_stg_13$FULL_N ;
  assign m_stg_13$DEQ = m_stg_13$EMPTY_N && m_stg_14$FULL_N ;
  assign m_stg_13$CLR = 1'b0 ;

  // submodule m_stg_14
  assign m_stg_14$D_IN =
	     m_stg_13$D_OUT[19] ?
	       { m_stg_13$D_OUT[65:43] +
		 m_stg_13_first__51_BITS_42_TO_20_54_SRA_13___d255,
		 m_stg_13$D_OUT[42:20] -
		 m_stg_13_first__51_BITS_65_TO_43_53_SRA_13___d257,
		 m_stg_13$D_OUT[19:0] + 20'd20 } :
	       { m_stg_13$D_OUT[65:43] -
		 m_stg_13_first__51_BITS_42_TO_20_54_SRA_13___d255,
		 m_stg_13$D_OUT[42:20] +
		 m_stg_13_first__51_BITS_65_TO_43_53_SRA_13___d257,
		 m_stg_13$D_OUT[19:0] - 20'd20 } ;
  assign m_stg_14$ENQ = m_stg_13$EMPTY_N && m_stg_14$FULL_N ;
  assign m_stg_14$DEQ = m_stg_14$EMPTY_N && m_stg_15$FULL_N ;
  assign m_stg_14$CLR = 1'b0 ;

  // submodule m_stg_15
  assign m_stg_15$D_IN =
	     m_stg_14$D_OUT[19] ?
	       { m_stg_14$D_OUT[65:43] +
		 m_stg_14_first__70_BITS_42_TO_20_73_SRA_14___d274,
		 m_stg_14$D_OUT[42:20] -
		 m_stg_14_first__70_BITS_65_TO_43_72_SRA_14___d276,
		 m_stg_14$D_OUT[19:0] + 20'd10 } :
	       { m_stg_14$D_OUT[65:43] -
		 m_stg_14_first__70_BITS_42_TO_20_73_SRA_14___d274,
		 m_stg_14$D_OUT[42:20] +
		 m_stg_14_first__70_BITS_65_TO_43_72_SRA_14___d276,
		 m_stg_14$D_OUT[19:0] - 20'd10 } ;
  assign m_stg_15$ENQ = m_stg_14$EMPTY_N && m_stg_15$FULL_N ;
  assign m_stg_15$DEQ = m_stg_15$EMPTY_N && m_stg_16$FULL_N ;
  assign m_stg_15$CLR = 1'b0 ;

  // submodule m_stg_16
  assign m_stg_16$D_IN =
	     m_stg_15$D_OUT[19] ?
	       { m_stg_15$D_OUT[65:43] +
		 m_stg_15_first__89_BITS_42_TO_20_92_SRA_15___d293,
		 m_stg_15$D_OUT[42:20] -
		 m_stg_15_first__89_BITS_65_TO_43_91_SRA_15___d295,
		 m_stg_15$D_OUT[19:0] + 20'd5 } :
	       { m_stg_15$D_OUT[65:43] -
		 m_stg_15_first__89_BITS_42_TO_20_92_SRA_15___d293,
		 m_stg_15$D_OUT[42:20] +
		 m_stg_15_first__89_BITS_65_TO_43_91_SRA_15___d295,
		 m_stg_15$D_OUT[19:0] - 20'd5 } ;
  assign m_stg_16$ENQ = m_stg_15$EMPTY_N && m_stg_16$FULL_N ;
  assign m_stg_16$DEQ = m_stg_16$EMPTY_N && m_stg_17$FULL_N ;
  assign m_stg_16$CLR = 1'b0 ;

  // submodule m_stg_17
  assign m_stg_17$D_IN =
	     m_stg_16$D_OUT[19] ?
	       { m_stg_16$D_OUT[65:43] +
		 m_stg_16_first__08_BITS_42_TO_20_11_SRA_16___d312,
		 m_stg_16$D_OUT[42:20] -
		 m_stg_16_first__08_BITS_65_TO_43_10_SRA_16___d314,
		 m_stg_16$D_OUT[19:0] + 20'd3 } :
	       { m_stg_16$D_OUT[65:43] -
		 m_stg_16_first__08_BITS_42_TO_20_11_SRA_16___d312,
		 m_stg_16$D_OUT[42:20] +
		 m_stg_16_first__08_BITS_65_TO_43_10_SRA_16___d314,
		 m_stg_16$D_OUT[19:0] - 20'd3 } ;
  assign m_stg_17$ENQ = m_stg_16$EMPTY_N && m_stg_17$FULL_N ;
  assign m_stg_17$DEQ = m_stg_17$EMPTY_N && m_stg_18$FULL_N ;
  assign m_stg_17$CLR = 1'b0 ;

  // submodule m_stg_18
  assign m_stg_18$D_IN =
	     { m_stg_17$D_OUT[65:43] + (m_stg_17$D_OUT[49] ? 23'd32 : 23'd31),
	       m_stg_17$D_OUT[42:20] + (m_stg_17$D_OUT[26] ? 23'd32 : 23'd31),
	       m_stg_17$D_OUT[19:0] + (m_stg_17$D_OUT[4] ? 20'd8 : 20'd7) } ;
  assign m_stg_18$ENQ = m_stg_17$EMPTY_N && m_stg_18$FULL_N ;
  assign m_stg_18$DEQ = EN_response_get ;
  assign m_stg_18$CLR = 1'b0 ;

  // submodule m_stg_2
  assign m_stg_2$D_IN =
	     m_stg_1$D_OUT[19] ?
	       { m_stg_1$D_OUT[65:43] +
		 m_stg_1_first__3_BITS_42_TO_20_6_SRA_1___d27,
		 m_stg_1$D_OUT[42:20] -
		 m_stg_1_first__3_BITS_65_TO_43_5_SRA_1___d29,
		 m_stg_1$D_OUT[19:0] + 20'd77376 } :
	       { m_stg_1$D_OUT[65:43] -
		 m_stg_1_first__3_BITS_42_TO_20_6_SRA_1___d27,
		 m_stg_1$D_OUT[42:20] +
		 m_stg_1_first__3_BITS_65_TO_43_5_SRA_1___d29,
		 m_stg_1$D_OUT[19:0] - 20'd77376 } ;
  assign m_stg_2$ENQ = m_stg_1$EMPTY_N && m_stg_2$FULL_N ;
  assign m_stg_2$DEQ = m_stg_2$EMPTY_N && m_stg_3$FULL_N ;
  assign m_stg_2$CLR = 1'b0 ;

  // submodule m_stg_3
  assign m_stg_3$D_IN =
	     m_stg_2$D_OUT[19] ?
	       { m_stg_2$D_OUT[65:43] +
		 m_stg_2_first__2_BITS_42_TO_20_5_SRA_2___d46,
		 m_stg_2$D_OUT[42:20] -
		 m_stg_2_first__2_BITS_65_TO_43_4_SRA_2___d48,
		 m_stg_2$D_OUT[19:0] + 20'd40884 } :
	       { m_stg_2$D_OUT[65:43] -
		 m_stg_2_first__2_BITS_42_TO_20_5_SRA_2___d46,
		 m_stg_2$D_OUT[42:20] +
		 m_stg_2_first__2_BITS_65_TO_43_4_SRA_2___d48,
		 m_stg_2$D_OUT[19:0] - 20'd40884 } ;
  assign m_stg_3$ENQ = m_stg_2$EMPTY_N && m_stg_3$FULL_N ;
  assign m_stg_3$DEQ = m_stg_3$EMPTY_N && m_stg_4$FULL_N ;
  assign m_stg_3$CLR = 1'b0 ;

  // submodule m_stg_4
  assign m_stg_4$D_IN =
	     m_stg_3$D_OUT[19] ?
	       { m_stg_3$D_OUT[65:43] +
		 m_stg_3_first__1_BITS_42_TO_20_4_SRA_3___d65,
		 m_stg_3$D_OUT[42:20] -
		 m_stg_3_first__1_BITS_65_TO_43_3_SRA_3___d67,
		 m_stg_3$D_OUT[19:0] + 20'd20753 } :
	       { m_stg_3$D_OUT[65:43] -
		 m_stg_3_first__1_BITS_42_TO_20_4_SRA_3___d65,
		 m_stg_3$D_OUT[42:20] +
		 m_stg_3_first__1_BITS_65_TO_43_3_SRA_3___d67,
		 m_stg_3$D_OUT[19:0] - 20'd20753 } ;
  assign m_stg_4$ENQ = m_stg_3$EMPTY_N && m_stg_4$FULL_N ;
  assign m_stg_4$DEQ = m_stg_4$EMPTY_N && m_stg_5$FULL_N ;
  assign m_stg_4$CLR = 1'b0 ;

  // submodule m_stg_5
  assign m_stg_5$D_IN =
	     m_stg_4$D_OUT[19] ?
	       { m_stg_4$D_OUT[65:43] +
		 m_stg_4_first__0_BITS_42_TO_20_3_SRA_4___d84,
		 m_stg_4$D_OUT[42:20] -
		 m_stg_4_first__0_BITS_65_TO_43_2_SRA_4___d86,
		 m_stg_4$D_OUT[19:0] + 20'd10417 } :
	       { m_stg_4$D_OUT[65:43] -
		 m_stg_4_first__0_BITS_42_TO_20_3_SRA_4___d84,
		 m_stg_4$D_OUT[42:20] +
		 m_stg_4_first__0_BITS_65_TO_43_2_SRA_4___d86,
		 m_stg_4$D_OUT[19:0] - 20'd10417 } ;
  assign m_stg_5$ENQ = m_stg_4$EMPTY_N && m_stg_5$FULL_N ;
  assign m_stg_5$DEQ = m_stg_5$EMPTY_N && m_stg_6$FULL_N ;
  assign m_stg_5$CLR = 1'b0 ;

  // submodule m_stg_6
  assign m_stg_6$D_IN =
	     m_stg_5$D_OUT[19] ?
	       { m_stg_5$D_OUT[65:43] +
		 m_stg_5_first__9_BITS_42_TO_20_02_SRA_5___d103,
		 m_stg_5$D_OUT[42:20] -
		 m_stg_5_first__9_BITS_65_TO_43_01_SRA_5___d105,
		 m_stg_5$D_OUT[19:0] + 20'd5213 } :
	       { m_stg_5$D_OUT[65:43] -
		 m_stg_5_first__9_BITS_42_TO_20_02_SRA_5___d103,
		 m_stg_5$D_OUT[42:20] +
		 m_stg_5_first__9_BITS_65_TO_43_01_SRA_5___d105,
		 m_stg_5$D_OUT[19:0] - 20'd5213 } ;
  assign m_stg_6$ENQ = m_stg_5$EMPTY_N && m_stg_6$FULL_N ;
  assign m_stg_6$DEQ = m_stg_6$EMPTY_N && m_stg_7$FULL_N ;
  assign m_stg_6$CLR = 1'b0 ;

  // submodule m_stg_7
  assign m_stg_7$D_IN =
	     m_stg_6$D_OUT[19] ?
	       { m_stg_6$D_OUT[65:43] +
		 m_stg_6_first__18_BITS_42_TO_20_21_SRA_6___d122,
		 m_stg_6$D_OUT[42:20] -
		 m_stg_6_first__18_BITS_65_TO_43_20_SRA_6___d124,
		 m_stg_6$D_OUT[19:0] + 20'd2607 } :
	       { m_stg_6$D_OUT[65:43] -
		 m_stg_6_first__18_BITS_42_TO_20_21_SRA_6___d122,
		 m_stg_6$D_OUT[42:20] +
		 m_stg_6_first__18_BITS_65_TO_43_20_SRA_6___d124,
		 m_stg_6$D_OUT[19:0] - 20'd2607 } ;
  assign m_stg_7$ENQ = m_stg_6$EMPTY_N && m_stg_7$FULL_N ;
  assign m_stg_7$DEQ = m_stg_7$EMPTY_N && m_stg_8$FULL_N ;
  assign m_stg_7$CLR = 1'b0 ;

  // submodule m_stg_8
  assign m_stg_8$D_IN =
	     m_stg_7$D_OUT[19] ?
	       { m_stg_7$D_OUT[65:43] +
		 m_stg_7_first__37_BITS_42_TO_20_40_SRA_7___d141,
		 m_stg_7$D_OUT[42:20] -
		 m_stg_7_first__37_BITS_65_TO_43_39_SRA_7___d143,
		 m_stg_7$D_OUT[19:0] + 20'd1304 } :
	       { m_stg_7$D_OUT[65:43] -
		 m_stg_7_first__37_BITS_42_TO_20_40_SRA_7___d141,
		 m_stg_7$D_OUT[42:20] +
		 m_stg_7_first__37_BITS_65_TO_43_39_SRA_7___d143,
		 m_stg_7$D_OUT[19:0] - 20'd1304 } ;
  assign m_stg_8$ENQ = m_stg_7$EMPTY_N && m_stg_8$FULL_N ;
  assign m_stg_8$DEQ = m_stg_8$EMPTY_N && m_stg_9$FULL_N ;
  assign m_stg_8$CLR = 1'b0 ;

  // submodule m_stg_9
  assign m_stg_9$D_IN =
	     m_stg_8$D_OUT[19] ?
	       { m_stg_8$D_OUT[65:43] +
		 m_stg_8_first__56_BITS_42_TO_20_59_SRA_8___d160,
		 m_stg_8$D_OUT[42:20] -
		 m_stg_8_first__56_BITS_65_TO_43_58_SRA_8___d162,
		 m_stg_8$D_OUT[19:0] + 20'd652 } :
	       { m_stg_8$D_OUT[65:43] -
		 m_stg_8_first__56_BITS_42_TO_20_59_SRA_8___d160,
		 m_stg_8$D_OUT[42:20] +
		 m_stg_8_first__56_BITS_65_TO_43_58_SRA_8___d162,
		 m_stg_8$D_OUT[19:0] - 20'd652 } ;
  assign m_stg_9$ENQ = m_stg_8$EMPTY_N && m_stg_9$FULL_N ;
  assign m_stg_9$DEQ = m_stg_9$EMPTY_N && m_stg_10$FULL_N ;
  assign m_stg_9$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_ETC___d364 =
	     { SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d357 ?
		 { SEXT_request_put_BITS_47_TO_328__q79[16:0], 6'd0 } :
		 -{ SEXT_request_put_BITS_31_TO_160__q81[16:0], 6'd0 },
	       SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d357 ?
		 SEXT_request_put_BITS_31_TO_160__q81[16:0] :
		 SEXT_request_put_BITS_47_TO_328__q79[16:0],
	       6'd0,
	       SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d357 ?
		 SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 :
		 SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 -
		 20'd262144 } ;
  assign SEXT_m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q9 =
	     { {4{m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q8[15]}},
	       m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q8 } ;
  assign SEXT_m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q6 =
	     { {6{m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q5[16]}},
	       m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q5 } ;
  assign SEXT_m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q3 =
	     { {6{m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q2[16]}},
	       m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q2 } ;
  assign SEXT_request_put_BITS_15_TO_03__q44 =
	     { {4{request_put_BITS_15_TO_0__q43[15]}},
	       request_put_BITS_15_TO_0__q43 } ;
  assign SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 =
	     { SEXT_request_put_BITS_15_TO_03__q44[15:0], 4'd0 } ;
  assign SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d357 =
	     (SEXT_request_put_BITS_15_TO_0_41_42_BITS_15_TO_ETC___d344 ^
	      20'h80000) <
	     20'd786432 ;
  assign SEXT_request_put_BITS_31_TO_160__q81 =
	     { {7{request_put_BITS_31_TO_16__q80[15]}},
	       request_put_BITS_31_TO_16__q80 } ;
  assign SEXT_request_put_BITS_47_TO_328__q79 =
	     { {7{request_put_BITS_47_TO_32__q78[15]}},
	       request_put_BITS_47_TO_32__q78 } ;
  assign m_stg_0D_OUT_BITS_42_TO_20__q10 = m_stg_0$D_OUT[42:20] ;
  assign m_stg_0D_OUT_BITS_65_TO_43__q45 = m_stg_0$D_OUT[65:43] ;
  assign m_stg_0_first_BITS_42_TO_20_SRA_0___d8 =
	     m_stg_0D_OUT_BITS_42_TO_20__q10 ;
  assign m_stg_0_first_BITS_65_TO_43_SRA_0___d10 =
	     m_stg_0D_OUT_BITS_65_TO_43__q45 ;
  assign m_stg_10D_OUT_BITS_42_TO_201_BITS_22_TO_10__q32 =
	     m_stg_10D_OUT_BITS_42_TO_20__q31[22:10] ;
  assign m_stg_10D_OUT_BITS_42_TO_20__q31 = m_stg_10$D_OUT[42:20] ;
  assign m_stg_10D_OUT_BITS_65_TO_434_BITS_22_TO_10__q65 =
	     m_stg_10D_OUT_BITS_65_TO_43__q64[22:10] ;
  assign m_stg_10D_OUT_BITS_65_TO_43__q64 = m_stg_10$D_OUT[65:43] ;
  assign m_stg_10_first__94_BITS_42_TO_20_97_SRA_10___d198 =
	     { {10{m_stg_10D_OUT_BITS_42_TO_201_BITS_22_TO_10__q32[12]}},
	       m_stg_10D_OUT_BITS_42_TO_201_BITS_22_TO_10__q32 } ;
  assign m_stg_10_first__94_BITS_65_TO_43_96_SRA_10___d200 =
	     { {10{m_stg_10D_OUT_BITS_65_TO_434_BITS_22_TO_10__q65[12]}},
	       m_stg_10D_OUT_BITS_65_TO_434_BITS_22_TO_10__q65 } ;
  assign m_stg_11D_OUT_BITS_42_TO_209_BITS_22_TO_11__q30 =
	     m_stg_11D_OUT_BITS_42_TO_20__q29[22:11] ;
  assign m_stg_11D_OUT_BITS_42_TO_20__q29 = m_stg_11$D_OUT[42:20] ;
  assign m_stg_11D_OUT_BITS_65_TO_436_BITS_22_TO_11__q67 =
	     m_stg_11D_OUT_BITS_65_TO_43__q66[22:11] ;
  assign m_stg_11D_OUT_BITS_65_TO_43__q66 = m_stg_11$D_OUT[65:43] ;
  assign m_stg_11_first__13_BITS_42_TO_20_16_SRA_11___d217 =
	     { {11{m_stg_11D_OUT_BITS_42_TO_209_BITS_22_TO_11__q30[11]}},
	       m_stg_11D_OUT_BITS_42_TO_209_BITS_22_TO_11__q30 } ;
  assign m_stg_11_first__13_BITS_65_TO_43_15_SRA_11___d219 =
	     { {11{m_stg_11D_OUT_BITS_65_TO_436_BITS_22_TO_11__q67[11]}},
	       m_stg_11D_OUT_BITS_65_TO_436_BITS_22_TO_11__q67 } ;
  assign m_stg_12D_OUT_BITS_42_TO_203_BITS_22_TO_12__q34 =
	     m_stg_12D_OUT_BITS_42_TO_20__q33[22:12] ;
  assign m_stg_12D_OUT_BITS_42_TO_20__q33 = m_stg_12$D_OUT[42:20] ;
  assign m_stg_12D_OUT_BITS_65_TO_438_BITS_22_TO_12__q69 =
	     m_stg_12D_OUT_BITS_65_TO_43__q68[22:12] ;
  assign m_stg_12D_OUT_BITS_65_TO_43__q68 = m_stg_12$D_OUT[65:43] ;
  assign m_stg_12_first__32_BITS_42_TO_20_35_SRA_12___d236 =
	     { {12{m_stg_12D_OUT_BITS_42_TO_203_BITS_22_TO_12__q34[10]}},
	       m_stg_12D_OUT_BITS_42_TO_203_BITS_22_TO_12__q34 } ;
  assign m_stg_12_first__32_BITS_65_TO_43_34_SRA_12___d238 =
	     { {12{m_stg_12D_OUT_BITS_65_TO_438_BITS_22_TO_12__q69[10]}},
	       m_stg_12D_OUT_BITS_65_TO_438_BITS_22_TO_12__q69 } ;
  assign m_stg_13D_OUT_BITS_42_TO_205_BITS_22_TO_13__q36 =
	     m_stg_13D_OUT_BITS_42_TO_20__q35[22:13] ;
  assign m_stg_13D_OUT_BITS_42_TO_20__q35 = m_stg_13$D_OUT[42:20] ;
  assign m_stg_13D_OUT_BITS_65_TO_430_BITS_22_TO_13__q71 =
	     m_stg_13D_OUT_BITS_65_TO_43__q70[22:13] ;
  assign m_stg_13D_OUT_BITS_65_TO_43__q70 = m_stg_13$D_OUT[65:43] ;
  assign m_stg_13_first__51_BITS_42_TO_20_54_SRA_13___d255 =
	     { {13{m_stg_13D_OUT_BITS_42_TO_205_BITS_22_TO_13__q36[9]}},
	       m_stg_13D_OUT_BITS_42_TO_205_BITS_22_TO_13__q36 } ;
  assign m_stg_13_first__51_BITS_65_TO_43_53_SRA_13___d257 =
	     { {13{m_stg_13D_OUT_BITS_65_TO_430_BITS_22_TO_13__q71[9]}},
	       m_stg_13D_OUT_BITS_65_TO_430_BITS_22_TO_13__q71 } ;
  assign m_stg_14D_OUT_BITS_42_TO_207_BITS_22_TO_14__q38 =
	     m_stg_14D_OUT_BITS_42_TO_20__q37[22:14] ;
  assign m_stg_14D_OUT_BITS_42_TO_20__q37 = m_stg_14$D_OUT[42:20] ;
  assign m_stg_14D_OUT_BITS_65_TO_432_BITS_22_TO_14__q73 =
	     m_stg_14D_OUT_BITS_65_TO_43__q72[22:14] ;
  assign m_stg_14D_OUT_BITS_65_TO_43__q72 = m_stg_14$D_OUT[65:43] ;
  assign m_stg_14_first__70_BITS_42_TO_20_73_SRA_14___d274 =
	     { {14{m_stg_14D_OUT_BITS_42_TO_207_BITS_22_TO_14__q38[8]}},
	       m_stg_14D_OUT_BITS_42_TO_207_BITS_22_TO_14__q38 } ;
  assign m_stg_14_first__70_BITS_65_TO_43_72_SRA_14___d276 =
	     { {14{m_stg_14D_OUT_BITS_65_TO_432_BITS_22_TO_14__q73[8]}},
	       m_stg_14D_OUT_BITS_65_TO_432_BITS_22_TO_14__q73 } ;
  assign m_stg_15D_OUT_BITS_42_TO_209_BITS_22_TO_15__q40 =
	     m_stg_15D_OUT_BITS_42_TO_20__q39[22:15] ;
  assign m_stg_15D_OUT_BITS_42_TO_20__q39 = m_stg_15$D_OUT[42:20] ;
  assign m_stg_15D_OUT_BITS_65_TO_434_BITS_22_TO_15__q75 =
	     m_stg_15D_OUT_BITS_65_TO_43__q74[22:15] ;
  assign m_stg_15D_OUT_BITS_65_TO_43__q74 = m_stg_15$D_OUT[65:43] ;
  assign m_stg_15_first__89_BITS_42_TO_20_92_SRA_15___d293 =
	     { {15{m_stg_15D_OUT_BITS_42_TO_209_BITS_22_TO_15__q40[7]}},
	       m_stg_15D_OUT_BITS_42_TO_209_BITS_22_TO_15__q40 } ;
  assign m_stg_15_first__89_BITS_65_TO_43_91_SRA_15___d295 =
	     { {15{m_stg_15D_OUT_BITS_65_TO_434_BITS_22_TO_15__q75[7]}},
	       m_stg_15D_OUT_BITS_65_TO_434_BITS_22_TO_15__q75 } ;
  assign m_stg_16D_OUT_BITS_42_TO_201_BITS_22_TO_16__q42 =
	     m_stg_16D_OUT_BITS_42_TO_20__q41[22:16] ;
  assign m_stg_16D_OUT_BITS_42_TO_20__q41 = m_stg_16$D_OUT[42:20] ;
  assign m_stg_16D_OUT_BITS_65_TO_436_BITS_22_TO_16__q77 =
	     m_stg_16D_OUT_BITS_65_TO_43__q76[22:16] ;
  assign m_stg_16D_OUT_BITS_65_TO_43__q76 = m_stg_16$D_OUT[65:43] ;
  assign m_stg_16_first__08_BITS_42_TO_20_11_SRA_16___d312 =
	     { {16{m_stg_16D_OUT_BITS_42_TO_201_BITS_22_TO_16__q42[6]}},
	       m_stg_16D_OUT_BITS_42_TO_201_BITS_22_TO_16__q42 } ;
  assign m_stg_16_first__08_BITS_65_TO_43_10_SRA_16___d314 =
	     { {16{m_stg_16D_OUT_BITS_65_TO_436_BITS_22_TO_16__q77[6]}},
	       m_stg_16D_OUT_BITS_65_TO_436_BITS_22_TO_16__q77 } ;
  assign m_stg_18D_OUT_BITS_19_TO_0_BITS_19_TO_4__q8 =
	     m_stg_18D_OUT_BITS_19_TO_0__q7[19:4] ;
  assign m_stg_18D_OUT_BITS_19_TO_0__q7 = m_stg_18$D_OUT[19:0] ;
  assign m_stg_18D_OUT_BITS_42_TO_20_BITS_22_TO_6__q5 =
	     m_stg_18D_OUT_BITS_42_TO_20__q4[22:6] ;
  assign m_stg_18D_OUT_BITS_42_TO_20__q4 = m_stg_18$D_OUT[42:20] ;
  assign m_stg_18D_OUT_BITS_65_TO_43_BITS_22_TO_6__q2 =
	     m_stg_18D_OUT_BITS_65_TO_43__q1[22:6] ;
  assign m_stg_18D_OUT_BITS_65_TO_43__q1 = m_stg_18$D_OUT[65:43] ;
  assign m_stg_1D_OUT_BITS_42_TO_201_BITS_22_TO_1__q12 =
	     m_stg_1D_OUT_BITS_42_TO_20__q11[22:1] ;
  assign m_stg_1D_OUT_BITS_42_TO_20__q11 = m_stg_1$D_OUT[42:20] ;
  assign m_stg_1D_OUT_BITS_65_TO_436_BITS_22_TO_1__q47 =
	     m_stg_1D_OUT_BITS_65_TO_43__q46[22:1] ;
  assign m_stg_1D_OUT_BITS_65_TO_43__q46 = m_stg_1$D_OUT[65:43] ;
  assign m_stg_1_first__3_BITS_42_TO_20_6_SRA_1___d27 =
	     { m_stg_1D_OUT_BITS_42_TO_201_BITS_22_TO_1__q12[21],
	       m_stg_1D_OUT_BITS_42_TO_201_BITS_22_TO_1__q12 } ;
  assign m_stg_1_first__3_BITS_65_TO_43_5_SRA_1___d29 =
	     { m_stg_1D_OUT_BITS_65_TO_436_BITS_22_TO_1__q47[21],
	       m_stg_1D_OUT_BITS_65_TO_436_BITS_22_TO_1__q47 } ;
  assign m_stg_2D_OUT_BITS_42_TO_203_BITS_22_TO_2__q14 =
	     m_stg_2D_OUT_BITS_42_TO_20__q13[22:2] ;
  assign m_stg_2D_OUT_BITS_42_TO_20__q13 = m_stg_2$D_OUT[42:20] ;
  assign m_stg_2D_OUT_BITS_65_TO_438_BITS_22_TO_2__q49 =
	     m_stg_2D_OUT_BITS_65_TO_43__q48[22:2] ;
  assign m_stg_2D_OUT_BITS_65_TO_43__q48 = m_stg_2$D_OUT[65:43] ;
  assign m_stg_2_first__2_BITS_42_TO_20_5_SRA_2___d46 =
	     { {2{m_stg_2D_OUT_BITS_42_TO_203_BITS_22_TO_2__q14[20]}},
	       m_stg_2D_OUT_BITS_42_TO_203_BITS_22_TO_2__q14 } ;
  assign m_stg_2_first__2_BITS_65_TO_43_4_SRA_2___d48 =
	     { {2{m_stg_2D_OUT_BITS_65_TO_438_BITS_22_TO_2__q49[20]}},
	       m_stg_2D_OUT_BITS_65_TO_438_BITS_22_TO_2__q49 } ;
  assign m_stg_3D_OUT_BITS_42_TO_205_BITS_22_TO_3__q16 =
	     m_stg_3D_OUT_BITS_42_TO_20__q15[22:3] ;
  assign m_stg_3D_OUT_BITS_42_TO_20__q15 = m_stg_3$D_OUT[42:20] ;
  assign m_stg_3D_OUT_BITS_65_TO_430_BITS_22_TO_3__q51 =
	     m_stg_3D_OUT_BITS_65_TO_43__q50[22:3] ;
  assign m_stg_3D_OUT_BITS_65_TO_43__q50 = m_stg_3$D_OUT[65:43] ;
  assign m_stg_3_first__1_BITS_42_TO_20_4_SRA_3___d65 =
	     { {3{m_stg_3D_OUT_BITS_42_TO_205_BITS_22_TO_3__q16[19]}},
	       m_stg_3D_OUT_BITS_42_TO_205_BITS_22_TO_3__q16 } ;
  assign m_stg_3_first__1_BITS_65_TO_43_3_SRA_3___d67 =
	     { {3{m_stg_3D_OUT_BITS_65_TO_430_BITS_22_TO_3__q51[19]}},
	       m_stg_3D_OUT_BITS_65_TO_430_BITS_22_TO_3__q51 } ;
  assign m_stg_4D_OUT_BITS_42_TO_207_BITS_22_TO_4__q18 =
	     m_stg_4D_OUT_BITS_42_TO_20__q17[22:4] ;
  assign m_stg_4D_OUT_BITS_42_TO_20__q17 = m_stg_4$D_OUT[42:20] ;
  assign m_stg_4D_OUT_BITS_65_TO_432_BITS_22_TO_4__q53 =
	     m_stg_4D_OUT_BITS_65_TO_43__q52[22:4] ;
  assign m_stg_4D_OUT_BITS_65_TO_43__q52 = m_stg_4$D_OUT[65:43] ;
  assign m_stg_4_first__0_BITS_42_TO_20_3_SRA_4___d84 =
	     { {4{m_stg_4D_OUT_BITS_42_TO_207_BITS_22_TO_4__q18[18]}},
	       m_stg_4D_OUT_BITS_42_TO_207_BITS_22_TO_4__q18 } ;
  assign m_stg_4_first__0_BITS_65_TO_43_2_SRA_4___d86 =
	     { {4{m_stg_4D_OUT_BITS_65_TO_432_BITS_22_TO_4__q53[18]}},
	       m_stg_4D_OUT_BITS_65_TO_432_BITS_22_TO_4__q53 } ;
  assign m_stg_5D_OUT_BITS_42_TO_209_BITS_22_TO_5__q20 =
	     m_stg_5D_OUT_BITS_42_TO_20__q19[22:5] ;
  assign m_stg_5D_OUT_BITS_42_TO_20__q19 = m_stg_5$D_OUT[42:20] ;
  assign m_stg_5D_OUT_BITS_65_TO_436_BITS_22_TO_5__q57 =
	     m_stg_5D_OUT_BITS_65_TO_43__q56[22:5] ;
  assign m_stg_5D_OUT_BITS_65_TO_43__q56 = m_stg_5$D_OUT[65:43] ;
  assign m_stg_5_first__9_BITS_42_TO_20_02_SRA_5___d103 =
	     { {5{m_stg_5D_OUT_BITS_42_TO_209_BITS_22_TO_5__q20[17]}},
	       m_stg_5D_OUT_BITS_42_TO_209_BITS_22_TO_5__q20 } ;
  assign m_stg_5_first__9_BITS_65_TO_43_01_SRA_5___d105 =
	     { {5{m_stg_5D_OUT_BITS_65_TO_436_BITS_22_TO_5__q57[17]}},
	       m_stg_5D_OUT_BITS_65_TO_436_BITS_22_TO_5__q57 } ;
  assign m_stg_6D_OUT_BITS_42_TO_201_BITS_22_TO_6__q22 =
	     m_stg_6D_OUT_BITS_42_TO_20__q21[22:6] ;
  assign m_stg_6D_OUT_BITS_42_TO_20__q21 = m_stg_6$D_OUT[42:20] ;
  assign m_stg_6D_OUT_BITS_65_TO_434_BITS_22_TO_6__q55 =
	     m_stg_6D_OUT_BITS_65_TO_43__q54[22:6] ;
  assign m_stg_6D_OUT_BITS_65_TO_43__q54 = m_stg_6$D_OUT[65:43] ;
  assign m_stg_6_first__18_BITS_42_TO_20_21_SRA_6___d122 =
	     { {6{m_stg_6D_OUT_BITS_42_TO_201_BITS_22_TO_6__q22[16]}},
	       m_stg_6D_OUT_BITS_42_TO_201_BITS_22_TO_6__q22 } ;
  assign m_stg_6_first__18_BITS_65_TO_43_20_SRA_6___d124 =
	     { {6{m_stg_6D_OUT_BITS_65_TO_434_BITS_22_TO_6__q55[16]}},
	       m_stg_6D_OUT_BITS_65_TO_434_BITS_22_TO_6__q55 } ;
  assign m_stg_7D_OUT_BITS_42_TO_203_BITS_22_TO_7__q24 =
	     m_stg_7D_OUT_BITS_42_TO_20__q23[22:7] ;
  assign m_stg_7D_OUT_BITS_42_TO_20__q23 = m_stg_7$D_OUT[42:20] ;
  assign m_stg_7D_OUT_BITS_65_TO_438_BITS_22_TO_7__q59 =
	     m_stg_7D_OUT_BITS_65_TO_43__q58[22:7] ;
  assign m_stg_7D_OUT_BITS_65_TO_43__q58 = m_stg_7$D_OUT[65:43] ;
  assign m_stg_7_first__37_BITS_42_TO_20_40_SRA_7___d141 =
	     { {7{m_stg_7D_OUT_BITS_42_TO_203_BITS_22_TO_7__q24[15]}},
	       m_stg_7D_OUT_BITS_42_TO_203_BITS_22_TO_7__q24 } ;
  assign m_stg_7_first__37_BITS_65_TO_43_39_SRA_7___d143 =
	     { {7{m_stg_7D_OUT_BITS_65_TO_438_BITS_22_TO_7__q59[15]}},
	       m_stg_7D_OUT_BITS_65_TO_438_BITS_22_TO_7__q59 } ;
  assign m_stg_8D_OUT_BITS_42_TO_205_BITS_22_TO_8__q26 =
	     m_stg_8D_OUT_BITS_42_TO_20__q25[22:8] ;
  assign m_stg_8D_OUT_BITS_42_TO_20__q25 = m_stg_8$D_OUT[42:20] ;
  assign m_stg_8D_OUT_BITS_65_TO_430_BITS_22_TO_8__q61 =
	     m_stg_8D_OUT_BITS_65_TO_43__q60[22:8] ;
  assign m_stg_8D_OUT_BITS_65_TO_43__q60 = m_stg_8$D_OUT[65:43] ;
  assign m_stg_8_first__56_BITS_42_TO_20_59_SRA_8___d160 =
	     { {8{m_stg_8D_OUT_BITS_42_TO_205_BITS_22_TO_8__q26[14]}},
	       m_stg_8D_OUT_BITS_42_TO_205_BITS_22_TO_8__q26 } ;
  assign m_stg_8_first__56_BITS_65_TO_43_58_SRA_8___d162 =
	     { {8{m_stg_8D_OUT_BITS_65_TO_430_BITS_22_TO_8__q61[14]}},
	       m_stg_8D_OUT_BITS_65_TO_430_BITS_22_TO_8__q61 } ;
  assign m_stg_9D_OUT_BITS_42_TO_207_BITS_22_TO_9__q28 =
	     m_stg_9D_OUT_BITS_42_TO_20__q27[22:9] ;
  assign m_stg_9D_OUT_BITS_42_TO_20__q27 = m_stg_9$D_OUT[42:20] ;
  assign m_stg_9D_OUT_BITS_65_TO_432_BITS_22_TO_9__q63 =
	     m_stg_9D_OUT_BITS_65_TO_43__q62[22:9] ;
  assign m_stg_9D_OUT_BITS_65_TO_43__q62 = m_stg_9$D_OUT[65:43] ;
  assign m_stg_9_first__75_BITS_42_TO_20_78_SRA_9___d179 =
	     { {9{m_stg_9D_OUT_BITS_42_TO_207_BITS_22_TO_9__q28[13]}},
	       m_stg_9D_OUT_BITS_42_TO_207_BITS_22_TO_9__q28 } ;
  assign m_stg_9_first__75_BITS_65_TO_43_77_SRA_9___d181 =
	     { {9{m_stg_9D_OUT_BITS_65_TO_432_BITS_22_TO_9__q63[13]}},
	       m_stg_9D_OUT_BITS_65_TO_432_BITS_22_TO_9__q63 } ;
  assign request_put_BITS_15_TO_0__q43 = request_put[15:0] ;
  assign request_put_BITS_31_TO_16__q80 = request_put[31:16] ;
  assign request_put_BITS_47_TO_32__q78 = request_put[47:32] ;
endmodule  // mkCORDIC_r_16

