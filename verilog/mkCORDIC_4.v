//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Sat Nov  6 15:35:53 CET 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    14
// RDY_response_get               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    12
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCORDIC_4(CLK,
		  RST_N,

		  request_put,
		  EN_request_put,
		  RDY_request_put,

		  EN_response_get,
		  response_get,
		  RDY_response_get);
  parameter [0 : 0] mode = 1'b0;
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [11 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [13 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [13 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule m_xr_0
  wire [6 : 0] m_xr_0$D_IN, m_xr_0$D_OUT;
  wire m_xr_0$CLR, m_xr_0$DEQ, m_xr_0$EMPTY_N, m_xr_0$ENQ, m_xr_0$FULL_N;

  // ports of submodule m_xr_1
  wire [6 : 0] m_xr_1$D_IN, m_xr_1$D_OUT;
  wire m_xr_1$CLR, m_xr_1$DEQ, m_xr_1$EMPTY_N, m_xr_1$ENQ, m_xr_1$FULL_N;

  // ports of submodule m_xr_2
  wire [6 : 0] m_xr_2$D_IN, m_xr_2$D_OUT;
  wire m_xr_2$CLR, m_xr_2$DEQ, m_xr_2$EMPTY_N, m_xr_2$ENQ, m_xr_2$FULL_N;

  // ports of submodule m_xr_3
  wire [6 : 0] m_xr_3$D_IN, m_xr_3$D_OUT;
  wire m_xr_3$CLR, m_xr_3$DEQ, m_xr_3$EMPTY_N, m_xr_3$ENQ, m_xr_3$FULL_N;

  // ports of submodule m_xr_4
  wire [6 : 0] m_xr_4$D_IN, m_xr_4$D_OUT;
  wire m_xr_4$CLR, m_xr_4$DEQ, m_xr_4$EMPTY_N, m_xr_4$ENQ, m_xr_4$FULL_N;

  // ports of submodule m_xr_5
  wire [6 : 0] m_xr_5$D_IN, m_xr_5$D_OUT;
  wire m_xr_5$CLR, m_xr_5$DEQ, m_xr_5$EMPTY_N, m_xr_5$ENQ, m_xr_5$FULL_N;

  // ports of submodule m_xr_6
  wire [6 : 0] m_xr_6$D_IN, m_xr_6$D_OUT;
  wire m_xr_6$CLR, m_xr_6$DEQ, m_xr_6$EMPTY_N, m_xr_6$ENQ, m_xr_6$FULL_N;

  // ports of submodule m_yr_0
  wire [6 : 0] m_yr_0$D_IN, m_yr_0$D_OUT;
  wire m_yr_0$CLR, m_yr_0$DEQ, m_yr_0$EMPTY_N, m_yr_0$ENQ, m_yr_0$FULL_N;

  // ports of submodule m_yr_1
  wire [6 : 0] m_yr_1$D_IN, m_yr_1$D_OUT;
  wire m_yr_1$CLR, m_yr_1$DEQ, m_yr_1$EMPTY_N, m_yr_1$ENQ, m_yr_1$FULL_N;

  // ports of submodule m_yr_2
  wire [6 : 0] m_yr_2$D_IN, m_yr_2$D_OUT;
  wire m_yr_2$CLR, m_yr_2$DEQ, m_yr_2$EMPTY_N, m_yr_2$ENQ, m_yr_2$FULL_N;

  // ports of submodule m_yr_3
  wire [6 : 0] m_yr_3$D_IN, m_yr_3$D_OUT;
  wire m_yr_3$CLR, m_yr_3$DEQ, m_yr_3$EMPTY_N, m_yr_3$ENQ, m_yr_3$FULL_N;

  // ports of submodule m_yr_4
  wire [6 : 0] m_yr_4$D_IN, m_yr_4$D_OUT;
  wire m_yr_4$CLR, m_yr_4$DEQ, m_yr_4$EMPTY_N, m_yr_4$ENQ, m_yr_4$FULL_N;

  // ports of submodule m_yr_5
  wire [6 : 0] m_yr_5$D_IN, m_yr_5$D_OUT;
  wire m_yr_5$CLR, m_yr_5$DEQ, m_yr_5$EMPTY_N, m_yr_5$ENQ, m_yr_5$FULL_N;

  // ports of submodule m_yr_6
  wire [6 : 0] m_yr_6$D_IN, m_yr_6$D_OUT;
  wire m_yr_6$CLR, m_yr_6$DEQ, m_yr_6$EMPTY_N, m_yr_6$ENQ, m_yr_6$FULL_N;

  // ports of submodule m_zr_0
  wire [5 : 0] m_zr_0$D_IN, m_zr_0$D_OUT;
  wire m_zr_0$CLR, m_zr_0$DEQ, m_zr_0$EMPTY_N, m_zr_0$ENQ, m_zr_0$FULL_N;

  // ports of submodule m_zr_1
  wire [5 : 0] m_zr_1$D_IN, m_zr_1$D_OUT;
  wire m_zr_1$CLR, m_zr_1$DEQ, m_zr_1$EMPTY_N, m_zr_1$ENQ, m_zr_1$FULL_N;

  // ports of submodule m_zr_2
  wire [5 : 0] m_zr_2$D_IN, m_zr_2$D_OUT;
  wire m_zr_2$CLR, m_zr_2$DEQ, m_zr_2$EMPTY_N, m_zr_2$ENQ, m_zr_2$FULL_N;

  // ports of submodule m_zr_3
  wire [5 : 0] m_zr_3$D_IN, m_zr_3$D_OUT;
  wire m_zr_3$CLR, m_zr_3$DEQ, m_zr_3$EMPTY_N, m_zr_3$ENQ, m_zr_3$FULL_N;

  // ports of submodule m_zr_4
  wire [5 : 0] m_zr_4$D_IN, m_zr_4$D_OUT;
  wire m_zr_4$CLR, m_zr_4$DEQ, m_zr_4$EMPTY_N, m_zr_4$ENQ, m_zr_4$FULL_N;

  // ports of submodule m_zr_5
  wire [5 : 0] m_zr_5$D_IN, m_zr_5$D_OUT;
  wire m_zr_5$CLR, m_zr_5$DEQ, m_zr_5$EMPTY_N, m_zr_5$ENQ, m_zr_5$FULL_N;

  // ports of submodule m_zr_6
  wire [5 : 0] m_zr_6$D_IN, m_zr_6$D_OUT;
  wire m_zr_6$CLR, m_zr_6$DEQ, m_zr_6$EMPTY_N, m_zr_6$ENQ, m_zr_6$FULL_N;

  // remaining internal signals
  wire [6 : 0] IF_mode_AND_SEXT_request_put_BITS_11_TO_8_85_8_ETC___d211,
	       SEXT_m_xr_6D_OUT_BITS_6_TO_2__q2,
	       SEXT_m_yr_6D_OUT_BITS_6_TO_2__q4,
	       SEXT_request_put_BITS_11_TO_8_85___d186,
	       SEXT_request_put_BITS_7_TO_4_89___d190,
	       m_xr_0_first__1_SRA_0___d26,
	       m_xr_1_first__2_SRA_1___d57,
	       m_xr_2_first__3_SRA_2___d88,
	       m_xr_3_first__14_SRA_3___d119,
	       m_xr_4_first__45_SRA_4___d150,
	       m_xr_5_first__76_SRA_5___d181,
	       m_yr_0_first__2_SRA_0___d22,
	       m_yr_1_first__4_SRA_1___d53,
	       m_yr_2_first__5_SRA_2___d84,
	       m_yr_3_first__06_SRA_3___d115,
	       m_yr_4_first__37_SRA_4___d146,
	       m_yr_5_first__68_SRA_5___d177;
  wire [5 : 0] SEXT_m_zr_6D_OUT_BITS_5_TO_2__q6,
	       SEXT_request_put_BITS_3_TO_09__q20,
	       SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197,
	       m_xr_1D_OUT_BITS_6_TO_1__q8,
	       m_yr_1D_OUT_BITS_6_TO_1__q7;
  wire [4 : 0] m_xr_2D_OUT_BITS_6_TO_2__q9,
	       m_xr_6D_OUT_BITS_6_TO_2__q1,
	       m_yr_2D_OUT_BITS_6_TO_2__q10,
	       m_yr_6D_OUT_BITS_6_TO_2__q3;
  wire [3 : 0] m_xr_3D_OUT_BITS_6_TO_3__q11,
	       m_yr_3D_OUT_BITS_6_TO_3__q12,
	       m_zr_6D_OUT_BITS_5_TO_2__q5,
	       request_put_BITS_11_TO_8__q17,
	       request_put_BITS_3_TO_0__q19,
	       request_put_BITS_7_TO_4__q18;
  wire [2 : 0] m_xr_4D_OUT_BITS_6_TO_4__q13, m_yr_4D_OUT_BITS_6_TO_4__q15;
  wire [1 : 0] m_xr_5D_OUT_BITS_6_TO_5__q14, m_yr_5D_OUT_BITS_6_TO_5__q16;
  wire m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9,
       m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41,
       m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72,
       m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103,
       m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134,
       m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165,
       mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d200,
       mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d207;

  // action method request_put
  assign RDY_request_put = m_xr_0$FULL_N && m_yr_0$FULL_N && m_zr_0$FULL_N ;

  // actionvalue method response_get
  assign response_get =
	     { SEXT_m_xr_6D_OUT_BITS_6_TO_2__q2[4:0],
	       SEXT_m_yr_6D_OUT_BITS_6_TO_2__q4[4:0],
	       SEXT_m_zr_6D_OUT_BITS_5_TO_2__q6[3:0] } ;
  assign RDY_response_get =
	     m_xr_6$EMPTY_N && m_yr_6$EMPTY_N && m_zr_6$EMPTY_N ;

  // submodule m_xr_0
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_0(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_0$D_IN),
						.ENQ(m_xr_0$ENQ),
						.DEQ(m_xr_0$DEQ),
						.CLR(m_xr_0$CLR),
						.D_OUT(m_xr_0$D_OUT),
						.FULL_N(m_xr_0$FULL_N),
						.EMPTY_N(m_xr_0$EMPTY_N));

  // submodule m_xr_1
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_1(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_1$D_IN),
						.ENQ(m_xr_1$ENQ),
						.DEQ(m_xr_1$DEQ),
						.CLR(m_xr_1$CLR),
						.D_OUT(m_xr_1$D_OUT),
						.FULL_N(m_xr_1$FULL_N),
						.EMPTY_N(m_xr_1$EMPTY_N));

  // submodule m_xr_2
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_2(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_2$D_IN),
						.ENQ(m_xr_2$ENQ),
						.DEQ(m_xr_2$DEQ),
						.CLR(m_xr_2$CLR),
						.D_OUT(m_xr_2$D_OUT),
						.FULL_N(m_xr_2$FULL_N),
						.EMPTY_N(m_xr_2$EMPTY_N));

  // submodule m_xr_3
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_3(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_3$D_IN),
						.ENQ(m_xr_3$ENQ),
						.DEQ(m_xr_3$DEQ),
						.CLR(m_xr_3$CLR),
						.D_OUT(m_xr_3$D_OUT),
						.FULL_N(m_xr_3$FULL_N),
						.EMPTY_N(m_xr_3$EMPTY_N));

  // submodule m_xr_4
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_4(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_4$D_IN),
						.ENQ(m_xr_4$ENQ),
						.DEQ(m_xr_4$DEQ),
						.CLR(m_xr_4$CLR),
						.D_OUT(m_xr_4$D_OUT),
						.FULL_N(m_xr_4$FULL_N),
						.EMPTY_N(m_xr_4$EMPTY_N));

  // submodule m_xr_5
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_5(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_5$D_IN),
						.ENQ(m_xr_5$ENQ),
						.DEQ(m_xr_5$DEQ),
						.CLR(m_xr_5$CLR),
						.D_OUT(m_xr_5$D_OUT),
						.FULL_N(m_xr_5$FULL_N),
						.EMPTY_N(m_xr_5$EMPTY_N));

  // submodule m_xr_6
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_xr_6(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_xr_6$D_IN),
						.ENQ(m_xr_6$ENQ),
						.DEQ(m_xr_6$DEQ),
						.CLR(m_xr_6$CLR),
						.D_OUT(m_xr_6$D_OUT),
						.FULL_N(m_xr_6$FULL_N),
						.EMPTY_N(m_xr_6$EMPTY_N));

  // submodule m_yr_0
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_0(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_0$D_IN),
						.ENQ(m_yr_0$ENQ),
						.DEQ(m_yr_0$DEQ),
						.CLR(m_yr_0$CLR),
						.D_OUT(m_yr_0$D_OUT),
						.FULL_N(m_yr_0$FULL_N),
						.EMPTY_N(m_yr_0$EMPTY_N));

  // submodule m_yr_1
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_1(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_1$D_IN),
						.ENQ(m_yr_1$ENQ),
						.DEQ(m_yr_1$DEQ),
						.CLR(m_yr_1$CLR),
						.D_OUT(m_yr_1$D_OUT),
						.FULL_N(m_yr_1$FULL_N),
						.EMPTY_N(m_yr_1$EMPTY_N));

  // submodule m_yr_2
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_2(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_2$D_IN),
						.ENQ(m_yr_2$ENQ),
						.DEQ(m_yr_2$DEQ),
						.CLR(m_yr_2$CLR),
						.D_OUT(m_yr_2$D_OUT),
						.FULL_N(m_yr_2$FULL_N),
						.EMPTY_N(m_yr_2$EMPTY_N));

  // submodule m_yr_3
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_3(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_3$D_IN),
						.ENQ(m_yr_3$ENQ),
						.DEQ(m_yr_3$DEQ),
						.CLR(m_yr_3$CLR),
						.D_OUT(m_yr_3$D_OUT),
						.FULL_N(m_yr_3$FULL_N),
						.EMPTY_N(m_yr_3$EMPTY_N));

  // submodule m_yr_4
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_4(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_4$D_IN),
						.ENQ(m_yr_4$ENQ),
						.DEQ(m_yr_4$DEQ),
						.CLR(m_yr_4$CLR),
						.D_OUT(m_yr_4$D_OUT),
						.FULL_N(m_yr_4$FULL_N),
						.EMPTY_N(m_yr_4$EMPTY_N));

  // submodule m_yr_5
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_5(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_5$D_IN),
						.ENQ(m_yr_5$ENQ),
						.DEQ(m_yr_5$DEQ),
						.CLR(m_yr_5$CLR),
						.D_OUT(m_yr_5$D_OUT),
						.FULL_N(m_yr_5$FULL_N),
						.EMPTY_N(m_yr_5$EMPTY_N));

  // submodule m_yr_6
  FIFO2 #(.width(32'd7), .guarded(1'd1)) m_yr_6(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_yr_6$D_IN),
						.ENQ(m_yr_6$ENQ),
						.DEQ(m_yr_6$DEQ),
						.CLR(m_yr_6$CLR),
						.D_OUT(m_yr_6$D_OUT),
						.FULL_N(m_yr_6$FULL_N),
						.EMPTY_N(m_yr_6$EMPTY_N));

  // submodule m_zr_0
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_0(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_0$D_IN),
						.ENQ(m_zr_0$ENQ),
						.DEQ(m_zr_0$DEQ),
						.CLR(m_zr_0$CLR),
						.D_OUT(m_zr_0$D_OUT),
						.FULL_N(m_zr_0$FULL_N),
						.EMPTY_N(m_zr_0$EMPTY_N));

  // submodule m_zr_1
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_1(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_1$D_IN),
						.ENQ(m_zr_1$ENQ),
						.DEQ(m_zr_1$DEQ),
						.CLR(m_zr_1$CLR),
						.D_OUT(m_zr_1$D_OUT),
						.FULL_N(m_zr_1$FULL_N),
						.EMPTY_N(m_zr_1$EMPTY_N));

  // submodule m_zr_2
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_2(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_2$D_IN),
						.ENQ(m_zr_2$ENQ),
						.DEQ(m_zr_2$DEQ),
						.CLR(m_zr_2$CLR),
						.D_OUT(m_zr_2$D_OUT),
						.FULL_N(m_zr_2$FULL_N),
						.EMPTY_N(m_zr_2$EMPTY_N));

  // submodule m_zr_3
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_3(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_3$D_IN),
						.ENQ(m_zr_3$ENQ),
						.DEQ(m_zr_3$DEQ),
						.CLR(m_zr_3$CLR),
						.D_OUT(m_zr_3$D_OUT),
						.FULL_N(m_zr_3$FULL_N),
						.EMPTY_N(m_zr_3$EMPTY_N));

  // submodule m_zr_4
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_4(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_4$D_IN),
						.ENQ(m_zr_4$ENQ),
						.DEQ(m_zr_4$DEQ),
						.CLR(m_zr_4$CLR),
						.D_OUT(m_zr_4$D_OUT),
						.FULL_N(m_zr_4$FULL_N),
						.EMPTY_N(m_zr_4$EMPTY_N));

  // submodule m_zr_5
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_5(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_5$D_IN),
						.ENQ(m_zr_5$ENQ),
						.DEQ(m_zr_5$DEQ),
						.CLR(m_zr_5$CLR),
						.D_OUT(m_zr_5$D_OUT),
						.FULL_N(m_zr_5$FULL_N),
						.EMPTY_N(m_zr_5$EMPTY_N));

  // submodule m_zr_6
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_zr_6(.RST(RST_N),
						.CLK(CLK),
						.D_IN(m_zr_6$D_IN),
						.ENQ(m_zr_6$ENQ),
						.DEQ(m_zr_6$DEQ),
						.CLR(m_zr_6$CLR),
						.D_OUT(m_zr_6$D_OUT),
						.FULL_N(m_zr_6$FULL_N),
						.EMPTY_N(m_zr_6$EMPTY_N));

  // submodule m_xr_0
  assign m_xr_0$D_IN =
	     mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d200 ?
	       { SEXT_request_put_BITS_7_TO_4_89___d190[4:0], 2'd0 } :
	       IF_mode_AND_SEXT_request_put_BITS_11_TO_8_85_8_ETC___d211 ;
  assign m_xr_0$ENQ = EN_request_put ;
  assign m_xr_0$DEQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_xr_0$CLR = 1'b0 ;

  // submodule m_xr_1
  assign m_xr_1$D_IN =
	     (mode && !m_yr_0$D_OUT[6] || !mode && m_zr_0$D_OUT[5]) ?
	       m_xr_0$D_OUT + m_yr_0_first__2_SRA_0___d22 :
	       m_xr_0$D_OUT - m_yr_0_first__2_SRA_0___d22 ;
  assign m_xr_1$ENQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_xr_1$DEQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_xr_1$CLR = 1'b0 ;

  // submodule m_xr_2
  assign m_xr_2$D_IN =
	     (mode && !m_yr_1$D_OUT[6] || !mode && m_zr_1$D_OUT[5]) ?
	       m_xr_1$D_OUT + m_yr_1_first__4_SRA_1___d53 :
	       m_xr_1$D_OUT - m_yr_1_first__4_SRA_1___d53 ;
  assign m_xr_2$ENQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_xr_2$DEQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_xr_2$CLR = 1'b0 ;

  // submodule m_xr_3
  assign m_xr_3$D_IN =
	     (mode && !m_yr_2$D_OUT[6] || !mode && m_zr_2$D_OUT[5]) ?
	       m_xr_2$D_OUT + m_yr_2_first__5_SRA_2___d84 :
	       m_xr_2$D_OUT - m_yr_2_first__5_SRA_2___d84 ;
  assign m_xr_3$ENQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_xr_3$DEQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_xr_3$CLR = 1'b0 ;

  // submodule m_xr_4
  assign m_xr_4$D_IN =
	     (mode && !m_yr_3$D_OUT[6] || !mode && m_zr_3$D_OUT[5]) ?
	       m_xr_3$D_OUT + m_yr_3_first__06_SRA_3___d115 :
	       m_xr_3$D_OUT - m_yr_3_first__06_SRA_3___d115 ;
  assign m_xr_4$ENQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_xr_4$DEQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_xr_4$CLR = 1'b0 ;

  // submodule m_xr_5
  assign m_xr_5$D_IN =
	     (mode && !m_yr_4$D_OUT[6] || !mode && m_zr_4$D_OUT[5]) ?
	       m_xr_4$D_OUT + m_yr_4_first__37_SRA_4___d146 :
	       m_xr_4$D_OUT - m_yr_4_first__37_SRA_4___d146 ;
  assign m_xr_5$ENQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_xr_5$DEQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_xr_5$CLR = 1'b0 ;

  // submodule m_xr_6
  assign m_xr_6$D_IN =
	     (mode && !m_yr_5$D_OUT[6] || !mode && m_zr_5$D_OUT[5]) ?
	       m_xr_5$D_OUT + m_yr_5_first__68_SRA_5___d177 :
	       m_xr_5$D_OUT - m_yr_5_first__68_SRA_5___d177 ;
  assign m_xr_6$ENQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_xr_6$DEQ = EN_response_get ;
  assign m_xr_6$CLR = 1'b0 ;

  // submodule m_yr_0
  assign m_yr_0$D_IN =
	     mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d200 ?
	       -{ SEXT_request_put_BITS_11_TO_8_85___d186[4:0], 2'd0 } :
	       { mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d207 ?
		   SEXT_request_put_BITS_11_TO_8_85___d186[4:0] :
		   SEXT_request_put_BITS_7_TO_4_89___d190[4:0],
		 2'd0 } ;
  assign m_yr_0$ENQ = EN_request_put ;
  assign m_yr_0$DEQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_yr_0$CLR = 1'b0 ;

  // submodule m_yr_1
  assign m_yr_1$D_IN =
	     (mode && !m_yr_0$D_OUT[6] || !mode && m_zr_0$D_OUT[5]) ?
	       m_yr_0$D_OUT - m_xr_0_first__1_SRA_0___d26 :
	       m_yr_0$D_OUT + m_xr_0_first__1_SRA_0___d26 ;
  assign m_yr_1$ENQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_yr_1$DEQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_yr_1$CLR = 1'b0 ;

  // submodule m_yr_2
  assign m_yr_2$D_IN =
	     (mode && !m_yr_1$D_OUT[6] || !mode && m_zr_1$D_OUT[5]) ?
	       m_yr_1$D_OUT - m_xr_1_first__2_SRA_1___d57 :
	       m_yr_1$D_OUT + m_xr_1_first__2_SRA_1___d57 ;
  assign m_yr_2$ENQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_yr_2$DEQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_yr_2$CLR = 1'b0 ;

  // submodule m_yr_3
  assign m_yr_3$D_IN =
	     (mode && !m_yr_2$D_OUT[6] || !mode && m_zr_2$D_OUT[5]) ?
	       m_yr_2$D_OUT - m_xr_2_first__3_SRA_2___d88 :
	       m_yr_2$D_OUT + m_xr_2_first__3_SRA_2___d88 ;
  assign m_yr_3$ENQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_yr_3$DEQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_yr_3$CLR = 1'b0 ;

  // submodule m_yr_4
  assign m_yr_4$D_IN =
	     (mode && !m_yr_3$D_OUT[6] || !mode && m_zr_3$D_OUT[5]) ?
	       m_yr_3$D_OUT - m_xr_3_first__14_SRA_3___d119 :
	       m_yr_3$D_OUT + m_xr_3_first__14_SRA_3___d119 ;
  assign m_yr_4$ENQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_yr_4$DEQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_yr_4$CLR = 1'b0 ;

  // submodule m_yr_5
  assign m_yr_5$D_IN =
	     (mode && !m_yr_4$D_OUT[6] || !mode && m_zr_4$D_OUT[5]) ?
	       m_yr_4$D_OUT - m_xr_4_first__45_SRA_4___d150 :
	       m_yr_4$D_OUT + m_xr_4_first__45_SRA_4___d150 ;
  assign m_yr_5$ENQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_yr_5$DEQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_yr_5$CLR = 1'b0 ;

  // submodule m_yr_6
  assign m_yr_6$D_IN =
	     (mode && !m_yr_5$D_OUT[6] || !mode && m_zr_5$D_OUT[5]) ?
	       m_yr_5$D_OUT - m_xr_5_first__76_SRA_5___d181 :
	       m_yr_5$D_OUT + m_xr_5_first__76_SRA_5___d181 ;
  assign m_yr_6$ENQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_yr_6$DEQ = EN_response_get ;
  assign m_yr_6$CLR = 1'b0 ;

  // submodule m_zr_0
  assign m_zr_0$D_IN =
	     mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d200 ?
	       SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197 +
	       6'd16 :
	       (mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d207 ?
		  SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197 -
		  6'd16 :
		  SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197) ;
  assign m_zr_0$ENQ = EN_request_put ;
  assign m_zr_0$DEQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_zr_0$CLR = 1'b0 ;

  // submodule m_zr_1
  assign m_zr_1$D_IN =
	     (mode && !m_yr_0$D_OUT[6] || !mode && m_zr_0$D_OUT[5]) ?
	       m_zr_0$D_OUT + 6'd8 :
	       m_zr_0$D_OUT - 6'd8 ;
  assign m_zr_1$ENQ =
	     m_xr_0$EMPTY_N && m_yr_0$EMPTY_N &&
	     m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 ;
  assign m_zr_1$DEQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_zr_1$CLR = 1'b0 ;

  // submodule m_zr_2
  assign m_zr_2$D_IN =
	     (mode && !m_yr_1$D_OUT[6] || !mode && m_zr_1$D_OUT[5]) ?
	       m_zr_1$D_OUT + 6'd5 :
	       m_zr_1$D_OUT - 6'd5 ;
  assign m_zr_2$ENQ =
	     m_xr_1$EMPTY_N && m_yr_1$EMPTY_N &&
	     m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 ;
  assign m_zr_2$DEQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_zr_2$CLR = 1'b0 ;

  // submodule m_zr_3
  assign m_zr_3$D_IN =
	     (mode && !m_yr_2$D_OUT[6] || !mode && m_zr_2$D_OUT[5]) ?
	       m_zr_2$D_OUT + 6'd2 :
	       m_zr_2$D_OUT - 6'd2 ;
  assign m_zr_3$ENQ =
	     m_xr_2$EMPTY_N && m_yr_2$EMPTY_N &&
	     m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 ;
  assign m_zr_3$DEQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_zr_3$CLR = 1'b0 ;

  // submodule m_zr_4
  assign m_zr_4$D_IN =
	     (mode && !m_yr_3$D_OUT[6] || !mode && m_zr_3$D_OUT[5]) ?
	       m_zr_3$D_OUT + 6'd1 :
	       m_zr_3$D_OUT - 6'd1 ;
  assign m_zr_4$ENQ =
	     m_xr_3$EMPTY_N && m_yr_3$EMPTY_N &&
	     m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 ;
  assign m_zr_4$DEQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_zr_4$CLR = 1'b0 ;

  // submodule m_zr_5
  assign m_zr_5$D_IN =
	     (mode && !m_yr_4$D_OUT[6] || !mode && m_zr_4$D_OUT[5]) ?
	       m_zr_4$D_OUT + 6'd1 :
	       m_zr_4$D_OUT - 6'd1 ;
  assign m_zr_5$ENQ =
	     m_xr_4$EMPTY_N && m_yr_4$EMPTY_N &&
	     m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 ;
  assign m_zr_5$DEQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_zr_5$CLR = 1'b0 ;

  // submodule m_zr_6
  assign m_zr_6$D_IN = m_zr_5$D_OUT ;
  assign m_zr_6$ENQ =
	     m_xr_5$EMPTY_N && m_yr_5$EMPTY_N &&
	     m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 ;
  assign m_zr_6$DEQ = EN_response_get ;
  assign m_zr_6$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_mode_AND_SEXT_request_put_BITS_11_TO_8_85_8_ETC___d211 =
	     mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d207 ?
	       -{ SEXT_request_put_BITS_7_TO_4_89___d190[4:0], 2'd0 } :
	       { SEXT_request_put_BITS_11_TO_8_85___d186[4:0], 2'd0 } ;
  assign SEXT_m_xr_6D_OUT_BITS_6_TO_2__q2 =
	     { {2{m_xr_6D_OUT_BITS_6_TO_2__q1[4]}},
	       m_xr_6D_OUT_BITS_6_TO_2__q1 } ;
  assign SEXT_m_yr_6D_OUT_BITS_6_TO_2__q4 =
	     { {2{m_yr_6D_OUT_BITS_6_TO_2__q3[4]}},
	       m_yr_6D_OUT_BITS_6_TO_2__q3 } ;
  assign SEXT_m_zr_6D_OUT_BITS_5_TO_2__q6 =
	     { {2{m_zr_6D_OUT_BITS_5_TO_2__q5[3]}},
	       m_zr_6D_OUT_BITS_5_TO_2__q5 } ;
  assign SEXT_request_put_BITS_11_TO_8_85___d186 =
	     { {3{request_put_BITS_11_TO_8__q17[3]}},
	       request_put_BITS_11_TO_8__q17 } ;
  assign SEXT_request_put_BITS_3_TO_09__q20 =
	     { {2{request_put_BITS_3_TO_0__q19[3]}},
	       request_put_BITS_3_TO_0__q19 } ;
  assign SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197 =
	     { SEXT_request_put_BITS_3_TO_09__q20[3:0], 2'd0 } ;
  assign SEXT_request_put_BITS_7_TO_4_89___d190 =
	     { {3{request_put_BITS_7_TO_4__q18[3]}},
	       request_put_BITS_7_TO_4__q18 } ;
  assign m_xr_0_first__1_SRA_0___d26 = m_xr_0$D_OUT ;
  assign m_xr_1D_OUT_BITS_6_TO_1__q8 = m_xr_1$D_OUT[6:1] ;
  assign m_xr_1_first__2_SRA_1___d57 =
	     { m_xr_1D_OUT_BITS_6_TO_1__q8[5], m_xr_1D_OUT_BITS_6_TO_1__q8 } ;
  assign m_xr_2D_OUT_BITS_6_TO_2__q9 = m_xr_2$D_OUT[6:2] ;
  assign m_xr_2_first__3_SRA_2___d88 =
	     { {2{m_xr_2D_OUT_BITS_6_TO_2__q9[4]}},
	       m_xr_2D_OUT_BITS_6_TO_2__q9 } ;
  assign m_xr_3D_OUT_BITS_6_TO_3__q11 = m_xr_3$D_OUT[6:3] ;
  assign m_xr_3_first__14_SRA_3___d119 =
	     { {3{m_xr_3D_OUT_BITS_6_TO_3__q11[3]}},
	       m_xr_3D_OUT_BITS_6_TO_3__q11 } ;
  assign m_xr_4D_OUT_BITS_6_TO_4__q13 = m_xr_4$D_OUT[6:4] ;
  assign m_xr_4_first__45_SRA_4___d150 =
	     { {4{m_xr_4D_OUT_BITS_6_TO_4__q13[2]}},
	       m_xr_4D_OUT_BITS_6_TO_4__q13 } ;
  assign m_xr_5D_OUT_BITS_6_TO_5__q14 = m_xr_5$D_OUT[6:5] ;
  assign m_xr_5_first__76_SRA_5___d181 =
	     { {5{m_xr_5D_OUT_BITS_6_TO_5__q14[1]}},
	       m_xr_5D_OUT_BITS_6_TO_5__q14 } ;
  assign m_xr_6D_OUT_BITS_6_TO_2__q1 = m_xr_6$D_OUT[6:2] ;
  assign m_yr_0_first__2_SRA_0___d22 = m_yr_0$D_OUT ;
  assign m_yr_1D_OUT_BITS_6_TO_1__q7 = m_yr_1$D_OUT[6:1] ;
  assign m_yr_1_first__4_SRA_1___d53 =
	     { m_yr_1D_OUT_BITS_6_TO_1__q7[5], m_yr_1D_OUT_BITS_6_TO_1__q7 } ;
  assign m_yr_2D_OUT_BITS_6_TO_2__q10 = m_yr_2$D_OUT[6:2] ;
  assign m_yr_2_first__5_SRA_2___d84 =
	     { {2{m_yr_2D_OUT_BITS_6_TO_2__q10[4]}},
	       m_yr_2D_OUT_BITS_6_TO_2__q10 } ;
  assign m_yr_3D_OUT_BITS_6_TO_3__q12 = m_yr_3$D_OUT[6:3] ;
  assign m_yr_3_first__06_SRA_3___d115 =
	     { {3{m_yr_3D_OUT_BITS_6_TO_3__q12[3]}},
	       m_yr_3D_OUT_BITS_6_TO_3__q12 } ;
  assign m_yr_4D_OUT_BITS_6_TO_4__q15 = m_yr_4$D_OUT[6:4] ;
  assign m_yr_4_first__37_SRA_4___d146 =
	     { {4{m_yr_4D_OUT_BITS_6_TO_4__q15[2]}},
	       m_yr_4D_OUT_BITS_6_TO_4__q15 } ;
  assign m_yr_5D_OUT_BITS_6_TO_5__q16 = m_yr_5$D_OUT[6:5] ;
  assign m_yr_5_first__68_SRA_5___d177 =
	     { {5{m_yr_5D_OUT_BITS_6_TO_5__q16[1]}},
	       m_yr_5D_OUT_BITS_6_TO_5__q16 } ;
  assign m_yr_6D_OUT_BITS_6_TO_2__q3 = m_yr_6$D_OUT[6:2] ;
  assign m_zr_0_i_notEmpty_AND_m_xr_1_i_notFull_AND_m_y_ETC___d9 =
	     m_zr_0$EMPTY_N && m_xr_1$FULL_N && m_yr_1$FULL_N &&
	     m_zr_1$FULL_N ;
  assign m_zr_1_i_notEmpty__5_AND_m_xr_2_i_notFull__6_A_ETC___d41 =
	     m_zr_1$EMPTY_N && m_xr_2$FULL_N && m_yr_2$FULL_N &&
	     m_zr_2$FULL_N ;
  assign m_zr_2_i_notEmpty__6_AND_m_xr_3_i_notFull__7_A_ETC___d72 =
	     m_zr_2$EMPTY_N && m_xr_3$FULL_N && m_yr_3$FULL_N &&
	     m_zr_3$FULL_N ;
  assign m_zr_3_i_notEmpty__7_AND_m_xr_4_i_notFull__8_A_ETC___d103 =
	     m_zr_3$EMPTY_N && m_xr_4$FULL_N && m_yr_4$FULL_N &&
	     m_zr_4$FULL_N ;
  assign m_zr_4_i_notEmpty__28_AND_m_xr_5_i_notFull__29_ETC___d134 =
	     m_zr_4$EMPTY_N && m_xr_5$FULL_N && m_yr_5$FULL_N &&
	     m_zr_5$FULL_N ;
  assign m_zr_5_i_notEmpty__59_AND_m_xr_6_i_notFull__60_ETC___d165 =
	     m_zr_5$EMPTY_N && m_xr_6$FULL_N && m_yr_6$FULL_N &&
	     m_zr_6$FULL_N ;
  assign m_zr_6D_OUT_BITS_5_TO_2__q5 = m_zr_6$D_OUT[5:2] ;
  assign mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d200 =
	     mode && SEXT_request_put_BITS_11_TO_8_85___d186[4] &&
	     !SEXT_request_put_BITS_7_TO_4_89___d190[4] ||
	     !mode &&
	     (SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197 ^
	      6'h20) <
	     6'd16 ;
  assign mode_AND_SEXT_request_put_BITS_11_TO_8_85_86_B_ETC___d207 =
	     mode && SEXT_request_put_BITS_11_TO_8_85___d186[4] &&
	     SEXT_request_put_BITS_7_TO_4_89___d190[4] ||
	     !mode &&
	     (SEXT_request_put_BITS_3_TO_0_94_95_BITS_3_TO_0_ETC___d197 ^
	      6'h20) >=
	     6'd48 ;
  assign request_put_BITS_11_TO_8__q17 = request_put[11:8] ;
  assign request_put_BITS_3_TO_0__q19 = request_put[3:0] ;
  assign request_put_BITS_7_TO_4__q18 = request_put[7:4] ;
endmodule  // mkCORDIC_4

